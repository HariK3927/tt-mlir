ARG FROM_TAG=latest
FROM ghcr.io/tenstorrent/tt-mlir/tt-mlir-base-ubuntu-22-04:${FROM_TAG} AS ci-build
SHELL ["/bin/bash", "-c"]

ARG CONFIG
ENV BUILD_CONFIG=$CONFIG

# Create a directory for the build and toolchain
ENV PROJECT_NAME=tt-mlir
ENV BUILD_DIR=/home/build
ENV TTMLIR_TOOLCHAIN_DIR=/opt/ttmlir-toolchain

RUN echo "Building $PROJECT_NAME"

RUN mkdir -p $BUILD_DIR && \
    mkdir -p $TTMLIR_TOOLCHAIN_DIR

# Copy the project to the container
ADD . $BUILD_DIR/$PROJECT_NAME

# Build the toolchain
WORKDIR $BUILD_DIR/$PROJECT_NAME

# Show last commit
RUN git log -1

RUN source env/activate && \
    cmake -B env/build env && \
    # if BUILD_CONFIG is debug, then build the toolchain with debug symbols
    if [ "$BUILD_CONFIG" == "debug" ]; then \
        cmake --build env/build --config debug; \
    else \
        cmake --build env/build
    fi

# Final stage
ARG FROM_TAG=latest
FROM ghcr.io/tenstorrent/tt-mlir/tt-mlir-base-ubuntu-22-04:${FROM_TAG} AS ci

# Copy the TTMLIR_TOOLCHAIN_DIR from the previous stage
ENV TTMLIR_TOOLCHAIN_DIR=/opt/ttmlir-toolchain
RUN echo "Copying from ci-build stage $TTMLIR_TOOLCHAIN_DIR"
# Split copy to get multiple layers
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR/venv $TTMLIR_TOOLCHAIN_DIR/venv
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR/lib $TTMLIR_TOOLCHAIN_DIR/lib
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR/bin $TTMLIR_TOOLCHAIN_DIR/bin
COPY --from=ci-build $TTMLIR_TOOLCHAIN_DIR $TTMLIR_TOOLCHAIN_DIR

# Show the size of the toolchain
RUN du -h --max-depth=2 $TTMLIR_TOOLCHAIN_DIR | sort -h
RUN du -h --max-depth=2 $TTMLIR_TOOLCHAIN_DIR/venv/lib/python3.10/site-packages/ | sort -h
