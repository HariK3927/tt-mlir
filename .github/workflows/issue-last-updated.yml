name: Update Project Date on Issue Update

on:
  issues:
    types: [opened, edited, deleted, closed, reopened, assigned, unassigned, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to test with'
        required: true
        default: '1019'
  push:
    branches:
      - '**'  # This will trigger on any branch push

jobs:
  update_project_date:
    runs-on: ubuntu-latest
    steps:
      - name: Set Environment Variables
        run: |
          echo "project_id=PVT_kwDOA9MHEM4AjeTl" >> $GITHUB_ENV
          echo "field_id=PVTF_lADOA9MHEM4AjeTlzgiiU18" >> $GITHUB_ENV

      - name: Get Issue Number
        id: get_issue_number
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            issue_number=${{ github.event.inputs.issue_number }}
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            issue_number="1019"  # Default for push events
          elif [[ "${{ github.event_name }}" == "issues" || "${{ github.event_name }}" == "issue_comment" ]]; then
            issue_number=${{ github.event.issue.number }}
          else
            echo "Unknown event type. Using default issue #1019"
            issue_number="1019"
          fi
          
          echo "Using Issue number: $issue_number"
          echo "issue_number=$issue_number" >> $GITHUB_ENV

      - name: Get Issue ID
        id: get_issue_id
        run: |
          issue_details=$(curl -H "Authorization: token ${{ secrets.GH_SECRET_PROJECTS }}" -s "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.issue_number }}")
          issue_id=$(echo "$issue_details" | jq -r '.node_id')
          echo "Issue ID: $issue_id"
          
          if [ -z "$issue_id" ] || [ "$issue_id" == "null" ]; then
            echo "Could not find issue ID. Check issue number and permissions."
            exit 1
          fi
          
          echo "issue_id=$issue_id" >> $GITHUB_ENV

      - name: Find Item ID in Project
        run: |
          # Properly escape the GraphQL query for JSON
          QUERY=$(cat <<'EOF'
          query($projectId: ID!, $issueId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }
          EOF
          )
          
          # Create a JSON payload with jq to ensure proper escaping
          JSON_PAYLOAD=$(jq -n \
            --arg query "$QUERY" \
            --arg projectId "${{ env.project_id }}" \
            --arg issueId "${{ env.issue_id }}" \
            '{query: $query, variables: {projectId: $projectId, issueId: $issueId}}')
          
          echo "JSON Payload: $JSON_PAYLOAD"
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GH_SECRET_PROJECTS }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql)
          
          echo "GraphQL Response: $RESPONSE"
          
          ITEM_ID=$(echo "$RESPONSE" | jq -r --arg issueId "${{ env.issue_id }}" '.data.node.items.nodes[] | select(.content.id==$issueId) | .id')
          
          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" == "null" ]; then
            echo "Could not find item ID for issue. Check project permissions and IDs."
            exit 1
          fi
          
          echo "Found Item ID: $ITEM_ID"
          echo "item_id=$ITEM_ID" >> $GITHUB_ENV

      - name: Update Last Updated Date Field
        run: |
          current_date=$(date +%Y-%m-%d)
          echo "Updating field ${{ env.field_id }} for item ${{ env.item_id }} to date $current_date"
          
          # Properly escape the GraphQL mutation for JSON
          MUTATION=$(cat <<'EOF'
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: { date: $date }
            }) {
              projectV2Item {
                id
              }
            }
          }
          EOF
          )
          
          # Create a JSON payload with jq to ensure proper escaping
          JSON_PAYLOAD=$(jq -n \
            --arg query "$MUTATION" \
            --arg projectId "${{ env.project_id }}" \
            --arg itemId "${{ env.item_id }}" \
            --arg fieldId "${{ env.field_id }}" \
            --arg date "$current_date" \
            '{query: $query, variables: {projectId: $projectId, itemId: $itemId, fieldId: $fieldId, date: $date}}')
          
          echo "JSON Payload: $JSON_PAYLOAD"
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GH_SECRET_PROJECTS }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.github.com/graphql)
            
          echo "Update Response: $RESPONSE"
          
          if echo "$RESPONSE" | jq -e '.errors' > /dev/null; then
            echo "Error updating field:"
            echo "$RESPONSE" | jq '.errors'
            exit 1
          else
            echo "Field updated successfully"
          fi