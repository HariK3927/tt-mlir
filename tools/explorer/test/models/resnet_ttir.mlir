#any_device = #tt.operand_constraint<dram|l1|scalar|tile|none|interleaved|single_bank|height_sharded|width_sharded|block_sharded|any_layout|any_device|any_device_tile|l1_block_sharded>
#loc = loc("ResNet":0:0)
module @ResNet attributes {} {
  func.func @forward(%arg0: tensor<1x3x224x224xf32> {ttir.name = "input_1"} loc("ResNet":0:0), %arg1: tensor<64x1x1xf32> {ttir.name = "input_1_add_1"} loc("ResNet":0:0), %arg2: tensor<64x1x1xf32> {ttir.name = "input_1_add_1_fork_clone1229"} loc("ResNet":0:0), %arg3: tensor<64x1x1xf32> {ttir.name = "input_1_add_18"} loc("ResNet":0:0), %arg4: tensor<64x1x1xf32> {ttir.name = "input_1_add_18_fork_clone1271"} loc("ResNet":0:0), %arg5: tensor<64x1x1xf32> {ttir.name = "input_1_add_34"} loc("ResNet":0:0), %arg6: tensor<64x1x1xf32> {ttir.name = "input_1_add_34_fork_clone1204"} loc("ResNet":0:0), %arg7: tensor<256x1x1xf32> {ttir.name = "input_1_add_50"} loc("ResNet":0:0), %arg8: tensor<256x1x1xf32> {ttir.name = "input_1_add_50_fork_clone1108"} loc("ResNet":0:0), %arg9: tensor<256x1x1xf32> {ttir.name = "input_1_add_65"} loc("ResNet":0:0), %arg10: tensor<256x1x1xf32> {ttir.name = "input_1_add_65_fork_clone1112"} loc("ResNet":0:0), %arg11: tensor<64x1x1xf32> {ttir.name = "input_1_add_82"} loc("ResNet":0:0), %arg12: tensor<64x1x1xf32> {ttir.name = "input_1_add_82_fork_clone1238"} loc("ResNet":0:0), %arg13: tensor<64x1x1xf32> {ttir.name = "input_1_add_98"} loc("ResNet":0:0), %arg14: tensor<64x1x1xf32> {ttir.name = "input_1_add_98_fork_clone1152"} loc("ResNet":0:0), %arg15: tensor<256x1x1xf32> {ttir.name = "input_1_add_114"} loc("ResNet":0:0), %arg16: tensor<256x1x1xf32> {ttir.name = "input_1_add_114_fork_clone1051"} loc("ResNet":0:0), %arg17: tensor<64x1x1xf32> {ttir.name = "input_1_add_131"} loc("ResNet":0:0), %arg18: tensor<64x1x1xf32> {ttir.name = "input_1_add_131_fork_clone1192"} loc("ResNet":0:0), %arg19: tensor<64x1x1xf32> {ttir.name = "input_1_add_147"} loc("ResNet":0:0), %arg20: tensor<64x1x1xf32> {ttir.name = "input_1_add_147_fork_clone1096"} loc("ResNet":0:0), %arg21: tensor<256x1x1xf32> {ttir.name = "input_1_add_163"} loc("ResNet":0:0), %arg22: tensor<256x1x1xf32> {ttir.name = "input_1_add_163_fork_clone992"} loc("ResNet":0:0), %arg23: tensor<128x1x1xf32> {ttir.name = "input_1_add_180"} loc("ResNet":0:0), %arg24: tensor<128x1x1xf32> {ttir.name = "input_1_add_180_fork_clone1065"} loc("ResNet":0:0), %arg25: tensor<128x1x1xf32> {ttir.name = "input_1_add_196"} loc("ResNet":0:0), %arg26: tensor<128x1x1xf32> {ttir.name = "input_1_add_196_fork_clone962"} loc("ResNet":0:0), %arg27: tensor<512x1x1xf32> {ttir.name = "input_1_add_212"} loc("ResNet":0:0), %arg28: tensor<512x1x1xf32> {ttir.name = "input_1_add_212_fork_clone853"} loc("ResNet":0:0), %arg29: tensor<512x1x1xf32> {ttir.name = "input_1_add_227"} loc("ResNet":0:0), %arg30: tensor<512x1x1xf32> {ttir.name = "input_1_add_227_fork_clone857"} loc("ResNet":0:0), %arg31: tensor<128x1x1xf32> {ttir.name = "input_1_add_244"} loc("ResNet":0:0), %arg32: tensor<128x1x1xf32> {ttir.name = "input_1_add_244_fork_clone1007"} loc("ResNet":0:0), %arg33: tensor<128x1x1xf32> {ttir.name = "input_1_add_260"} loc("ResNet":0:0), %arg34: tensor<128x1x1xf32> {ttir.name = "input_1_add_260_fork_clone901"} loc("ResNet":0:0), %arg35: tensor<512x1x1xf32> {ttir.name = "input_1_add_276"} loc("ResNet":0:0), %arg36: tensor<512x1x1xf32> {ttir.name = "input_1_add_276_fork_clone791"} loc("ResNet":0:0), %arg37: tensor<128x1x1xf32> {ttir.name = "input_1_add_293"} loc("ResNet":0:0), %arg38: tensor<128x1x1xf32> {ttir.name = "input_1_add_293_fork_clone950"} loc("ResNet":0:0), %arg39: tensor<128x1x1xf32> {ttir.name = "input_1_add_309"} loc("ResNet":0:0), %arg40: tensor<128x1x1xf32> {ttir.name = "input_1_add_309_fork_clone841"} loc("ResNet":0:0), %arg41: tensor<512x1x1xf32> {ttir.name = "input_1_add_325"} loc("ResNet":0:0), %arg42: tensor<512x1x1xf32> {ttir.name = "input_1_add_325_fork_clone735"} loc("ResNet":0:0), %arg43: tensor<128x1x1xf32> {ttir.name = "input_1_add_342"} loc("ResNet":0:0), %arg44: tensor<128x1x1xf32> {ttir.name = "input_1_add_342_fork_clone889"} loc("ResNet":0:0), %arg45: tensor<128x1x1xf32> {ttir.name = "input_1_add_358"} loc("ResNet":0:0), %arg46: tensor<128x1x1xf32> {ttir.name = "input_1_add_358_fork_clone779"} loc("ResNet":0:0), %arg47: tensor<512x1x1xf32> {ttir.name = "input_1_add_374"} loc("ResNet":0:0), %arg48: tensor<512x1x1xf32> {ttir.name = "input_1_add_374_fork_clone677"} loc("ResNet":0:0), %arg49: tensor<256x1x1xf32> {ttir.name = "input_1_add_391"} loc("ResNet":0:0), %arg50: tensor<256x1x1xf32> {ttir.name = "input_1_add_391_fork_clone748"} loc("ResNet":0:0), %arg51: tensor<256x1x1xf32> {ttir.name = "input_1_add_407"} loc("ResNet":0:0), %arg52: tensor<256x1x1xf32> {ttir.name = "input_1_add_407_fork_clone645"} loc("ResNet":0:0), %arg53: tensor<1024x1x1xf32> {ttir.name = "input_1_add_423"} loc("ResNet":0:0), %arg54: tensor<1024x1x1xf32> {ttir.name = "input_1_add_423_fork_clone524"} loc("ResNet":0:0), %arg55: tensor<1024x1x1xf32> {ttir.name = "input_1_add_438"} loc("ResNet":0:0), %arg56: tensor<1024x1x1xf32> {ttir.name = "input_1_add_438_fork_clone528"} loc("ResNet":0:0), %arg57: tensor<256x1x1xf32> {ttir.name = "input_1_add_455"} loc("ResNet":0:0), %arg58: tensor<256x1x1xf32> {ttir.name = "input_1_add_455_fork_clone692"} loc("ResNet":0:0), %arg59: tensor<256x1x1xf32> {ttir.name = "input_1_add_471"} loc("ResNet":0:0), %arg60: tensor<256x1x1xf32> {ttir.name = "input_1_add_471_fork_clone580"} loc("ResNet":0:0), %arg61: tensor<1024x1x1xf32> {ttir.name = "input_1_add_487"} loc("ResNet":0:0), %arg62: tensor<1024x1x1xf32> {ttir.name = "input_1_add_487_fork_clone453"} loc("ResNet":0:0), %arg63: tensor<256x1x1xf32> {ttir.name = "input_1_add_504"} loc("ResNet":0:0), %arg64: tensor<256x1x1xf32> {ttir.name = "input_1_add_504_fork_clone633"} loc("ResNet":0:0), %arg65: tensor<256x1x1xf32> {ttir.name = "input_1_add_520"} loc("ResNet":0:0), %arg66: tensor<256x1x1xf32> {ttir.name = "input_1_add_520_fork_clone512"} loc("ResNet":0:0), %arg67: tensor<1024x1x1xf32> {ttir.name = "input_1_add_536"} loc("ResNet":0:0), %arg68: tensor<1024x1x1xf32> {ttir.name = "input_1_add_536_fork_clone389"} loc("ResNet":0:0), %arg69: tensor<256x1x1xf32> {ttir.name = "input_1_add_553"} loc("ResNet":0:0), %arg70: tensor<256x1x1xf32> {ttir.name = "input_1_add_553_fork_clone568"} loc("ResNet":0:0), %arg71: tensor<256x1x1xf32> {ttir.name = "input_1_add_569"} loc("ResNet":0:0), %arg72: tensor<256x1x1xf32> {ttir.name = "input_1_add_569_fork_clone441"} loc("ResNet":0:0), %arg73: tensor<1024x1x1xf32> {ttir.name = "input_1_add_585"} loc("ResNet":0:0), %arg74: tensor<1024x1x1xf32> {ttir.name = "input_1_add_585_fork_clone329"} loc("ResNet":0:0), %arg75: tensor<256x1x1xf32> {ttir.name = "input_1_add_602"} loc("ResNet":0:0), %arg76: tensor<256x1x1xf32> {ttir.name = "input_1_add_602_fork_clone500"} loc("ResNet":0:0), %arg77: tensor<256x1x1xf32> {ttir.name = "input_1_add_618"} loc("ResNet":0:0), %arg78: tensor<256x1x1xf32> {ttir.name = "input_1_add_618_fork_clone377"} loc("ResNet":0:0), %arg79: tensor<1024x1x1xf32> {ttir.name = "input_1_add_634"} loc("ResNet":0:0), %arg80: tensor<1024x1x1xf32> {ttir.name = "input_1_add_634_fork_clone274"} loc("ResNet":0:0), %arg81: tensor<256x1x1xf32> {ttir.name = "input_1_add_651"} loc("ResNet":0:0), %arg82: tensor<256x1x1xf32> {ttir.name = "input_1_add_651_fork_clone429"} loc("ResNet":0:0), %arg83: tensor<256x1x1xf32> {ttir.name = "input_1_add_667"} loc("ResNet":0:0), %arg84: tensor<256x1x1xf32> {ttir.name = "input_1_add_667_fork_clone317"} loc("ResNet":0:0), %arg85: tensor<1024x1x1xf32> {ttir.name = "input_1_add_683"} loc("ResNet":0:0), %arg86: tensor<1024x1x1xf32> {ttir.name = "input_1_add_683_fork_clone219"} loc("ResNet":0:0), %arg87: tensor<512x1x1xf32> {ttir.name = "input_1_add_700"} loc("ResNet":0:0), %arg88: tensor<512x1x1xf32> {ttir.name = "input_1_add_700_fork_clone287"} loc("ResNet":0:0), %arg89: tensor<512x1x1xf32> {ttir.name = "input_1_add_716"} loc("ResNet":0:0), %arg90: tensor<512x1x1xf32> {ttir.name = "input_1_add_716_fork_clone190"} loc("ResNet":0:0), %arg91: tensor<2048x1x1xf32> {ttir.name = "input_1_add_732"} loc("ResNet":0:0), %arg92: tensor<2048x1x1xf32> {ttir.name = "input_1_add_732_fork_clone101"} loc("ResNet":0:0), %arg93: tensor<2048x1x1xf32> {ttir.name = "input_1_add_747"} loc("ResNet":0:0), %arg94: tensor<2048x1x1xf32> {ttir.name = "input_1_add_747_fork_clone105"} loc("ResNet":0:0), %arg95: tensor<512x1x1xf32> {ttir.name = "input_1_add_764"} loc("ResNet":0:0), %arg96: tensor<512x1x1xf32> {ttir.name = "input_1_add_764_fork_clone233"} loc("ResNet":0:0), %arg97: tensor<512x1x1xf32> {ttir.name = "input_1_add_780"} loc("ResNet":0:0), %arg98: tensor<512x1x1xf32> {ttir.name = "input_1_add_780_fork_clone138"} loc("ResNet":0:0), %arg99: tensor<2048x1x1xf32> {ttir.name = "input_1_add_796"} loc("ResNet":0:0), %arg100: tensor<2048x1x1xf32> {ttir.name = "input_1_add_796_fork_clone61"} loc("ResNet":0:0), %arg101: tensor<512x1x1xf32> {ttir.name = "input_1_add_813"} loc("ResNet":0:0), %arg102: tensor<512x1x1xf32> {ttir.name = "input_1_add_813_fork_clone178"} loc("ResNet":0:0), %arg103: tensor<512x1x1xf32> {ttir.name = "input_1_add_829"} loc("ResNet":0:0), %arg104: tensor<512x1x1xf32> {ttir.name = "input_1_add_829_fork_clone89"} loc("ResNet":0:0), %arg105: tensor<2048x1x1xf32> {ttir.name = "input_1_add_845"} loc("ResNet":0:0), %arg106: tensor<2048x1x1xf32> {ttir.name = "input_1_add_845_fork_clone32"} loc("ResNet":0:0), %arg107: tensor<64x3x7x7xf32> {ttir.name = "conv1.weight"} loc("ResNet":0:0), %arg108: tensor<64x64x1x1xf32> {ttir.name = "layer1.0.conv1.weight"} loc("ResNet":0:0), %arg109: tensor<64x64x3x3xf32> {ttir.name = "layer1.0.conv2.weight"} loc("ResNet":0:0), %arg110: tensor<256x64x1x1xf32> {ttir.name = "layer1.0.conv3.weight"} loc("ResNet":0:0), %arg111: tensor<256x64x1x1xf32> {ttir.name = "layer1.0.downsample.0.weight"} loc("ResNet":0:0), %arg112: tensor<64x256x1x1xf32> {ttir.name = "layer1.1.conv1.weight"} loc("ResNet":0:0), %arg113: tensor<64x64x3x3xf32> {ttir.name = "layer1.1.conv2.weight"} loc("ResNet":0:0), %arg114: tensor<256x64x1x1xf32> {ttir.name = "layer1.1.conv3.weight"} loc("ResNet":0:0), %arg115: tensor<64x256x1x1xf32> {ttir.name = "layer1.2.conv1.weight"} loc("ResNet":0:0), %arg116: tensor<64x64x3x3xf32> {ttir.name = "layer1.2.conv2.weight"} loc("ResNet":0:0), %arg117: tensor<256x64x1x1xf32> {ttir.name = "layer1.2.conv3.weight"} loc("ResNet":0:0), %arg118: tensor<128x256x1x1xf32> {ttir.name = "layer2.0.conv1.weight"} loc("ResNet":0:0), %arg119: tensor<128x128x3x3xf32> {ttir.name = "layer2.0.conv2.weight"} loc("ResNet":0:0), %arg120: tensor<512x128x1x1xf32> {ttir.name = "layer2.0.conv3.weight"} loc("ResNet":0:0), %arg121: tensor<512x256x1x1xf32> {ttir.name = "layer2.0.downsample.0.weight"} loc("ResNet":0:0), %arg122: tensor<128x512x1x1xf32> {ttir.name = "layer2.1.conv1.weight"} loc("ResNet":0:0), %arg123: tensor<128x128x3x3xf32> {ttir.name = "layer2.1.conv2.weight"} loc("ResNet":0:0), %arg124: tensor<512x128x1x1xf32> {ttir.name = "layer2.1.conv3.weight"} loc("ResNet":0:0), %arg125: tensor<128x512x1x1xf32> {ttir.name = "layer2.2.conv1.weight"} loc("ResNet":0:0), %arg126: tensor<128x128x3x3xf32> {ttir.name = "layer2.2.conv2.weight"} loc("ResNet":0:0), %arg127: tensor<512x128x1x1xf32> {ttir.name = "layer2.2.conv3.weight"} loc("ResNet":0:0), %arg128: tensor<128x512x1x1xf32> {ttir.name = "layer2.3.conv1.weight"} loc("ResNet":0:0), %arg129: tensor<128x128x3x3xf32> {ttir.name = "layer2.3.conv2.weight"} loc("ResNet":0:0), %arg130: tensor<512x128x1x1xf32> {ttir.name = "layer2.3.conv3.weight"} loc("ResNet":0:0), %arg131: tensor<256x512x1x1xf32> {ttir.name = "layer3.0.conv1.weight"} loc("ResNet":0:0), %arg132: tensor<256x256x3x3xf32> {ttir.name = "layer3.0.conv2.weight"} loc("ResNet":0:0), %arg133: tensor<1024x256x1x1xf32> {ttir.name = "layer3.0.conv3.weight"} loc("ResNet":0:0), %arg134: tensor<1024x512x1x1xf32> {ttir.name = "layer3.0.downsample.0.weight"} loc("ResNet":0:0), %arg135: tensor<256x1024x1x1xf32> {ttir.name = "layer3.1.conv1.weight"} loc("ResNet":0:0), %arg136: tensor<256x256x3x3xf32> {ttir.name = "layer3.1.conv2.weight"} loc("ResNet":0:0), %arg137: tensor<1024x256x1x1xf32> {ttir.name = "layer3.1.conv3.weight"} loc("ResNet":0:0), %arg138: tensor<256x1024x1x1xf32> {ttir.name = "layer3.2.conv1.weight"} loc("ResNet":0:0), %arg139: tensor<256x256x3x3xf32> {ttir.name = "layer3.2.conv2.weight"} loc("ResNet":0:0), %arg140: tensor<1024x256x1x1xf32> {ttir.name = "layer3.2.conv3.weight"} loc("ResNet":0:0), %arg141: tensor<256x1024x1x1xf32> {ttir.name = "layer3.3.conv1.weight"} loc("ResNet":0:0), %arg142: tensor<256x256x3x3xf32> {ttir.name = "layer3.3.conv2.weight"} loc("ResNet":0:0), %arg143: tensor<1024x256x1x1xf32> {ttir.name = "layer3.3.conv3.weight"} loc("ResNet":0:0), %arg144: tensor<256x1024x1x1xf32> {ttir.name = "layer3.4.conv1.weight"} loc("ResNet":0:0), %arg145: tensor<256x256x3x3xf32> {ttir.name = "layer3.4.conv2.weight"} loc("ResNet":0:0), %arg146: tensor<1024x256x1x1xf32> {ttir.name = "layer3.4.conv3.weight"} loc("ResNet":0:0), %arg147: tensor<256x1024x1x1xf32> {ttir.name = "layer3.5.conv1.weight"} loc("ResNet":0:0), %arg148: tensor<256x256x3x3xf32> {ttir.name = "layer3.5.conv2.weight"} loc("ResNet":0:0), %arg149: tensor<1024x256x1x1xf32> {ttir.name = "layer3.5.conv3.weight"} loc("ResNet":0:0), %arg150: tensor<512x1024x1x1xf32> {ttir.name = "layer4.0.conv1.weight"} loc("ResNet":0:0), %arg151: tensor<512x512x3x3xf32> {ttir.name = "layer4.0.conv2.weight"} loc("ResNet":0:0), %arg152: tensor<2048x512x1x1xf32> {ttir.name = "layer4.0.conv3.weight"} loc("ResNet":0:0), %arg153: tensor<2048x1024x1x1xf32> {ttir.name = "layer4.0.downsample.0.weight"} loc("ResNet":0:0), %arg154: tensor<512x2048x1x1xf32> {ttir.name = "layer4.1.conv1.weight"} loc("ResNet":0:0), %arg155: tensor<512x512x3x3xf32> {ttir.name = "layer4.1.conv2.weight"} loc("ResNet":0:0), %arg156: tensor<2048x512x1x1xf32> {ttir.name = "layer4.1.conv3.weight"} loc("ResNet":0:0), %arg157: tensor<512x2048x1x1xf32> {ttir.name = "layer4.2.conv1.weight"} loc("ResNet":0:0), %arg158: tensor<512x512x3x3xf32> {ttir.name = "layer4.2.conv2.weight"} loc("ResNet":0:0), %arg159: tensor<2048x512x1x1xf32> {ttir.name = "layer4.2.conv3.weight"} loc("ResNet":0:0), %arg160: tensor<2048x1000xf32> {ttir.name = "fc.weight"} loc("ResNet":0:0), %arg161: tensor<1000xf32> {ttir.name = "fc.bias"} loc("ResNet":0:0)) -> (tensor<1x1000xf32> {ttir.name = "ResNet.output_add_867"}) {
    %0 = tensor.empty() : tensor<1x224x3x224xf32> loc(#loc447)
    %1 = "ttir.transpose"(%arg0, %0) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x3x224x224xf32>, tensor<1x224x3x224xf32>) -> tensor<1x224x3x224xf32> loc(#loc447)
    %2 = tensor.empty() : tensor<1x224x224x3xf32> loc(#loc448)
    %3 = "ttir.transpose"(%1, %2) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x224x3x224xf32>, tensor<1x224x224x3xf32>) -> tensor<1x224x224x3xf32> loc(#loc448)
    %4 = tensor.empty() : tensor<1x112x112x64xf32> loc(#loc449)
    %5 = "ttir.conv2d"(%3, %arg107, %4) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 3 : si32, padding_left = 3 : si32, padding_right = 3 : si32, padding_top = 3 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x224x224x3xf32>, tensor<64x3x7x7xf32>, tensor<1x112x112x64xf32>) -> tensor<1x112x112x64xf32> loc(#loc449)
    %6 = tensor.empty() : tensor<1x112x64x112xf32> loc(#loc450)
    %7 = "ttir.transpose"(%5, %6) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x112x112x64xf32>, tensor<1x112x64x112xf32>) -> tensor<1x112x64x112xf32> loc(#loc450)
    %8 = tensor.empty() : tensor<1x64x112x112xf32> loc(#loc451)
    %9 = "ttir.transpose"(%7, %8) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x112x64x112xf32>, tensor<1x64x112x112xf32>) -> tensor<1x64x112x112xf32> loc(#loc451)
    %10 = tensor.empty() : tensor<1x64x112x112xf32> loc(#loc452)
    %11 = "ttir.multiply"(%9, %arg1, %10) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x112x112xf32>, tensor<64x1x1xf32>, tensor<1x64x112x112xf32>) -> tensor<1x64x112x112xf32> loc(#loc452)
    %12 = tensor.empty() : tensor<1x64x112x112xf32> loc(#loc453)
    %13 = "ttir.add"(%11, %arg2, %12) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x112x112xf32>, tensor<64x1x1xf32>, tensor<1x64x112x112xf32>) -> tensor<1x64x112x112xf32> loc(#loc453)
    %14 = tensor.empty() : tensor<1x64x112x112xf32> loc(#loc454)
    %15 = "ttir.relu"(%13, %14) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x112x112xf32>, tensor<1x64x112x112xf32>) -> tensor<1x64x112x112xf32> loc(#loc454)
    %16 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc455)
    %17 = "ttir.max_pool2d"(%15, %16) <{ceil_mode = false, dilation_height = 1 : si32, dilation_width = 1 : si32, kernel_height = 3 : si32, kernel_width = 3 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 0 : si32} : (tensor<1x64x112x112xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc455)
    %18 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc456)
    %19 = "ttir.transpose"(%17, %18) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc456)
    %20 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc457)
    %21 = "ttir.transpose"(%19, %20) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc457)
    %22 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc458)
    %23 = "ttir.conv2d"(%21, %arg108, %22) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<64x64x1x1xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc458)
    %24 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc459)
    %25 = "ttir.transpose"(%23, %24) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc459)
    %26 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc460)
    %27 = "ttir.transpose"(%25, %26) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc460)
    %28 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc461)
    %29 = "ttir.multiply"(%27, %arg3, %28) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc461)
    %30 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc462)
    %31 = "ttir.add"(%29, %arg4, %30) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc462)
    %32 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc463)
    %33 = "ttir.relu"(%31, %32) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc463)
    %34 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc464)
    %35 = "ttir.transpose"(%33, %34) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc464)
    %36 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc465)
    %37 = "ttir.transpose"(%35, %36) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc465)
    %38 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc466)
    %39 = "ttir.conv2d"(%37, %arg109, %38) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<64x64x3x3xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc466)
    %40 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc467)
    %41 = "ttir.transpose"(%39, %40) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc467)
    %42 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc468)
    %43 = "ttir.transpose"(%41, %42) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc468)
    %44 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc469)
    %45 = "ttir.multiply"(%43, %arg5, %44) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc469)
    %46 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc470)
    %47 = "ttir.add"(%45, %arg6, %46) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc470)
    %48 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc471)
    %49 = "ttir.relu"(%47, %48) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc471)
    %50 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc472)
    %51 = "ttir.transpose"(%49, %50) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc472)
    %52 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc473)
    %53 = "ttir.transpose"(%51, %52) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc473)
    %54 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc474)
    %55 = "ttir.conv2d"(%53, %arg110, %54) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<256x64x1x1xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc474)
    %56 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc475)
    %57 = "ttir.transpose"(%55, %56) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x256xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc475)
    %58 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc476)
    %59 = "ttir.transpose"(%57, %58) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc476)
    %60 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc477)
    %61 = "ttir.multiply"(%59, %arg7, %60) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc477)
    %62 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc478)
    %63 = "ttir.add"(%61, %arg8, %62) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc478)
    %64 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc479)
    %65 = "ttir.transpose"(%17, %64) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc479)
    %66 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc480)
    %67 = "ttir.transpose"(%65, %66) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc480)
    %68 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc481)
    %69 = "ttir.conv2d"(%67, %arg111, %68) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<256x64x1x1xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc481)
    %70 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc482)
    %71 = "ttir.transpose"(%69, %70) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x256xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc482)
    %72 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc483)
    %73 = "ttir.transpose"(%71, %72) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc483)
    %74 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc484)
    %75 = "ttir.multiply"(%73, %arg9, %74) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc484)
    %76 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc485)
    %77 = "ttir.add"(%75, %arg10, %76) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc485)
    %78 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc486)
    %79 = "ttir.add"(%63, %77, %78) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc486)
    %80 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc487)
    %81 = "ttir.relu"(%79, %80) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc487)
    %82 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc488)
    %83 = "ttir.transpose"(%81, %82) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc488)
    %84 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc489)
    %85 = "ttir.transpose"(%83, %84) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc489)
    %86 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc490)
    %87 = "ttir.conv2d"(%85, %arg112, %86) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x256xf32>, tensor<64x256x1x1xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc490)
    %88 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc491)
    %89 = "ttir.transpose"(%87, %88) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc491)
    %90 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc492)
    %91 = "ttir.transpose"(%89, %90) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc492)
    %92 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc493)
    %93 = "ttir.multiply"(%91, %arg11, %92) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc493)
    %94 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc494)
    %95 = "ttir.add"(%93, %arg12, %94) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc494)
    %96 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc495)
    %97 = "ttir.relu"(%95, %96) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc495)
    %98 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc496)
    %99 = "ttir.transpose"(%97, %98) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc496)
    %100 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc497)
    %101 = "ttir.transpose"(%99, %100) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc497)
    %102 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc498)
    %103 = "ttir.conv2d"(%101, %arg113, %102) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<64x64x3x3xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc498)
    %104 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc499)
    %105 = "ttir.transpose"(%103, %104) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc499)
    %106 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc500)
    %107 = "ttir.transpose"(%105, %106) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc500)
    %108 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc501)
    %109 = "ttir.multiply"(%107, %arg13, %108) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc501)
    %110 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc502)
    %111 = "ttir.add"(%109, %arg14, %110) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc502)
    %112 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc503)
    %113 = "ttir.relu"(%111, %112) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc503)
    %114 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc504)
    %115 = "ttir.transpose"(%113, %114) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc504)
    %116 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc505)
    %117 = "ttir.transpose"(%115, %116) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc505)
    %118 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc506)
    %119 = "ttir.conv2d"(%117, %arg114, %118) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<256x64x1x1xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc506)
    %120 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc507)
    %121 = "ttir.transpose"(%119, %120) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x256xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc507)
    %122 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc508)
    %123 = "ttir.transpose"(%121, %122) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc508)
    %124 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc509)
    %125 = "ttir.multiply"(%123, %arg15, %124) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc509)
    %126 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc510)
    %127 = "ttir.add"(%125, %arg16, %126) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc510)
    %128 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc511)
    %129 = "ttir.add"(%127, %81, %128) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc511)
    %130 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc512)
    %131 = "ttir.relu"(%129, %130) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc512)
    %132 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc513)
    %133 = "ttir.transpose"(%131, %132) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc513)
    %134 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc514)
    %135 = "ttir.transpose"(%133, %134) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc514)
    %136 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc515)
    %137 = "ttir.conv2d"(%135, %arg115, %136) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x256xf32>, tensor<64x256x1x1xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc515)
    %138 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc516)
    %139 = "ttir.transpose"(%137, %138) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc516)
    %140 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc517)
    %141 = "ttir.transpose"(%139, %140) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc517)
    %142 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc518)
    %143 = "ttir.multiply"(%141, %arg17, %142) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc518)
    %144 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc519)
    %145 = "ttir.add"(%143, %arg18, %144) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc519)
    %146 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc520)
    %147 = "ttir.relu"(%145, %146) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc520)
    %148 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc521)
    %149 = "ttir.transpose"(%147, %148) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc521)
    %150 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc522)
    %151 = "ttir.transpose"(%149, %150) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc522)
    %152 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc523)
    %153 = "ttir.conv2d"(%151, %arg116, %152) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<64x64x3x3xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc523)
    %154 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc524)
    %155 = "ttir.transpose"(%153, %154) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x64xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc524)
    %156 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc525)
    %157 = "ttir.transpose"(%155, %156) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc525)
    %158 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc526)
    %159 = "ttir.multiply"(%157, %arg19, %158) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc526)
    %160 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc527)
    %161 = "ttir.add"(%159, %arg20, %160) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<64x1x1xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc527)
    %162 = tensor.empty() : tensor<1x64x56x56xf32> loc(#loc528)
    %163 = "ttir.relu"(%161, %162) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x64x56x56xf32>) -> tensor<1x64x56x56xf32> loc(#loc528)
    %164 = tensor.empty() : tensor<1x56x64x56xf32> loc(#loc529)
    %165 = "ttir.transpose"(%163, %164) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x64x56x56xf32>, tensor<1x56x64x56xf32>) -> tensor<1x56x64x56xf32> loc(#loc529)
    %166 = tensor.empty() : tensor<1x56x56x64xf32> loc(#loc530)
    %167 = "ttir.transpose"(%165, %166) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x64x56xf32>, tensor<1x56x56x64xf32>) -> tensor<1x56x56x64xf32> loc(#loc530)
    %168 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc531)
    %169 = "ttir.conv2d"(%167, %arg117, %168) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x64xf32>, tensor<256x64x1x1xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc531)
    %170 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc532)
    %171 = "ttir.transpose"(%169, %170) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x256xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc532)
    %172 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc533)
    %173 = "ttir.transpose"(%171, %172) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc533)
    %174 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc534)
    %175 = "ttir.multiply"(%173, %arg21, %174) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc534)
    %176 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc535)
    %177 = "ttir.add"(%175, %arg22, %176) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<256x1x1xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc535)
    %178 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc536)
    %179 = "ttir.add"(%177, %131, %178) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc536)
    %180 = tensor.empty() : tensor<1x256x56x56xf32> loc(#loc537)
    %181 = "ttir.relu"(%179, %180) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x256x56x56xf32>) -> tensor<1x256x56x56xf32> loc(#loc537)
    %182 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc538)
    %183 = "ttir.transpose"(%181, %182) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc538)
    %184 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc539)
    %185 = "ttir.transpose"(%183, %184) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc539)
    %186 = tensor.empty() : tensor<1x56x56x128xf32> loc(#loc540)
    %187 = "ttir.conv2d"(%185, %arg118, %186) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x256xf32>, tensor<128x256x1x1xf32>, tensor<1x56x56x128xf32>) -> tensor<1x56x56x128xf32> loc(#loc540)
    %188 = tensor.empty() : tensor<1x56x128x56xf32> loc(#loc541)
    %189 = "ttir.transpose"(%187, %188) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x56x128xf32>, tensor<1x56x128x56xf32>) -> tensor<1x56x128x56xf32> loc(#loc541)
    %190 = tensor.empty() : tensor<1x128x56x56xf32> loc(#loc542)
    %191 = "ttir.transpose"(%189, %190) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x128x56xf32>, tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32> loc(#loc542)
    %192 = tensor.empty() : tensor<1x128x56x56xf32> loc(#loc543)
    %193 = "ttir.multiply"(%191, %arg23, %192) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x56x56xf32>, tensor<128x1x1xf32>, tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32> loc(#loc543)
    %194 = tensor.empty() : tensor<1x128x56x56xf32> loc(#loc544)
    %195 = "ttir.add"(%193, %arg24, %194) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x56x56xf32>, tensor<128x1x1xf32>, tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32> loc(#loc544)
    %196 = tensor.empty() : tensor<1x128x56x56xf32> loc(#loc545)
    %197 = "ttir.relu"(%195, %196) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x56x56xf32>, tensor<1x128x56x56xf32>) -> tensor<1x128x56x56xf32> loc(#loc545)
    %198 = tensor.empty() : tensor<1x56x128x56xf32> loc(#loc546)
    %199 = "ttir.transpose"(%197, %198) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x56x56xf32>, tensor<1x56x128x56xf32>) -> tensor<1x56x128x56xf32> loc(#loc546)
    %200 = tensor.empty() : tensor<1x56x56x128xf32> loc(#loc547)
    %201 = "ttir.transpose"(%199, %200) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x128x56xf32>, tensor<1x56x56x128xf32>) -> tensor<1x56x56x128xf32> loc(#loc547)
    %202 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc548)
    %203 = "ttir.conv2d"(%201, %arg119, %202) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x128xf32>, tensor<128x128x3x3xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc548)
    %204 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc549)
    %205 = "ttir.transpose"(%203, %204) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc549)
    %206 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc550)
    %207 = "ttir.transpose"(%205, %206) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc550)
    %208 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc551)
    %209 = "ttir.multiply"(%207, %arg25, %208) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc551)
    %210 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc552)
    %211 = "ttir.add"(%209, %arg26, %210) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc552)
    %212 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc553)
    %213 = "ttir.relu"(%211, %212) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc553)
    %214 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc554)
    %215 = "ttir.transpose"(%213, %214) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc554)
    %216 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc555)
    %217 = "ttir.transpose"(%215, %216) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc555)
    %218 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc556)
    %219 = "ttir.conv2d"(%217, %arg120, %218) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<512x128x1x1xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc556)
    %220 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc557)
    %221 = "ttir.transpose"(%219, %220) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x512xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc557)
    %222 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc558)
    %223 = "ttir.transpose"(%221, %222) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc558)
    %224 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc559)
    %225 = "ttir.multiply"(%223, %arg27, %224) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc559)
    %226 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc560)
    %227 = "ttir.add"(%225, %arg28, %226) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc560)
    %228 = tensor.empty() : tensor<1x56x256x56xf32> loc(#loc561)
    %229 = "ttir.transpose"(%181, %228) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x56x56xf32>, tensor<1x56x256x56xf32>) -> tensor<1x56x256x56xf32> loc(#loc561)
    %230 = tensor.empty() : tensor<1x56x56x256xf32> loc(#loc562)
    %231 = "ttir.transpose"(%229, %230) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x56x256x56xf32>, tensor<1x56x56x256xf32>) -> tensor<1x56x56x256xf32> loc(#loc562)
    %232 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc563)
    %233 = "ttir.conv2d"(%231, %arg121, %232) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x56x56x256xf32>, tensor<512x256x1x1xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc563)
    %234 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc564)
    %235 = "ttir.transpose"(%233, %234) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x512xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc564)
    %236 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc565)
    %237 = "ttir.transpose"(%235, %236) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc565)
    %238 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc566)
    %239 = "ttir.multiply"(%237, %arg29, %238) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc566)
    %240 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc567)
    %241 = "ttir.add"(%239, %arg30, %240) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc567)
    %242 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc568)
    %243 = "ttir.add"(%227, %241, %242) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc568)
    %244 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc569)
    %245 = "ttir.relu"(%243, %244) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc569)
    %246 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc570)
    %247 = "ttir.transpose"(%245, %246) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc570)
    %248 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc571)
    %249 = "ttir.transpose"(%247, %248) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc571)
    %250 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc572)
    %251 = "ttir.conv2d"(%249, %arg122, %250) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x512xf32>, tensor<128x512x1x1xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc572)
    %252 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc573)
    %253 = "ttir.transpose"(%251, %252) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc573)
    %254 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc574)
    %255 = "ttir.transpose"(%253, %254) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc574)
    %256 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc575)
    %257 = "ttir.multiply"(%255, %arg31, %256) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc575)
    %258 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc576)
    %259 = "ttir.add"(%257, %arg32, %258) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc576)
    %260 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc577)
    %261 = "ttir.relu"(%259, %260) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc577)
    %262 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc578)
    %263 = "ttir.transpose"(%261, %262) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc578)
    %264 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc579)
    %265 = "ttir.transpose"(%263, %264) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc579)
    %266 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc580)
    %267 = "ttir.conv2d"(%265, %arg123, %266) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<128x128x3x3xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc580)
    %268 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc581)
    %269 = "ttir.transpose"(%267, %268) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc581)
    %270 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc582)
    %271 = "ttir.transpose"(%269, %270) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc582)
    %272 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc583)
    %273 = "ttir.multiply"(%271, %arg33, %272) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc583)
    %274 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc584)
    %275 = "ttir.add"(%273, %arg34, %274) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc584)
    %276 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc585)
    %277 = "ttir.relu"(%275, %276) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc585)
    %278 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc586)
    %279 = "ttir.transpose"(%277, %278) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc586)
    %280 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc587)
    %281 = "ttir.transpose"(%279, %280) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc587)
    %282 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc588)
    %283 = "ttir.conv2d"(%281, %arg124, %282) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<512x128x1x1xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc588)
    %284 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc589)
    %285 = "ttir.transpose"(%283, %284) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x512xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc589)
    %286 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc590)
    %287 = "ttir.transpose"(%285, %286) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc590)
    %288 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc591)
    %289 = "ttir.multiply"(%287, %arg35, %288) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc591)
    %290 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc592)
    %291 = "ttir.add"(%289, %arg36, %290) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc592)
    %292 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc593)
    %293 = "ttir.add"(%291, %245, %292) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc593)
    %294 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc594)
    %295 = "ttir.relu"(%293, %294) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc594)
    %296 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc595)
    %297 = "ttir.transpose"(%295, %296) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc595)
    %298 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc596)
    %299 = "ttir.transpose"(%297, %298) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc596)
    %300 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc597)
    %301 = "ttir.conv2d"(%299, %arg125, %300) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x512xf32>, tensor<128x512x1x1xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc597)
    %302 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc598)
    %303 = "ttir.transpose"(%301, %302) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc598)
    %304 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc599)
    %305 = "ttir.transpose"(%303, %304) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc599)
    %306 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc600)
    %307 = "ttir.multiply"(%305, %arg37, %306) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc600)
    %308 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc601)
    %309 = "ttir.add"(%307, %arg38, %308) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc601)
    %310 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc602)
    %311 = "ttir.relu"(%309, %310) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc602)
    %312 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc603)
    %313 = "ttir.transpose"(%311, %312) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc603)
    %314 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc604)
    %315 = "ttir.transpose"(%313, %314) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc604)
    %316 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc605)
    %317 = "ttir.conv2d"(%315, %arg126, %316) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<128x128x3x3xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc605)
    %318 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc606)
    %319 = "ttir.transpose"(%317, %318) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc606)
    %320 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc607)
    %321 = "ttir.transpose"(%319, %320) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc607)
    %322 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc608)
    %323 = "ttir.multiply"(%321, %arg39, %322) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc608)
    %324 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc609)
    %325 = "ttir.add"(%323, %arg40, %324) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc609)
    %326 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc610)
    %327 = "ttir.relu"(%325, %326) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc610)
    %328 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc611)
    %329 = "ttir.transpose"(%327, %328) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc611)
    %330 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc612)
    %331 = "ttir.transpose"(%329, %330) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc612)
    %332 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc613)
    %333 = "ttir.conv2d"(%331, %arg127, %332) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<512x128x1x1xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc613)
    %334 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc614)
    %335 = "ttir.transpose"(%333, %334) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x512xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc614)
    %336 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc615)
    %337 = "ttir.transpose"(%335, %336) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc615)
    %338 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc616)
    %339 = "ttir.multiply"(%337, %arg41, %338) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc616)
    %340 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc617)
    %341 = "ttir.add"(%339, %arg42, %340) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc617)
    %342 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc618)
    %343 = "ttir.add"(%341, %295, %342) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc618)
    %344 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc619)
    %345 = "ttir.relu"(%343, %344) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc619)
    %346 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc620)
    %347 = "ttir.transpose"(%345, %346) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc620)
    %348 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc621)
    %349 = "ttir.transpose"(%347, %348) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc621)
    %350 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc622)
    %351 = "ttir.conv2d"(%349, %arg128, %350) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x512xf32>, tensor<128x512x1x1xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc622)
    %352 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc623)
    %353 = "ttir.transpose"(%351, %352) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc623)
    %354 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc624)
    %355 = "ttir.transpose"(%353, %354) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc624)
    %356 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc625)
    %357 = "ttir.multiply"(%355, %arg43, %356) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc625)
    %358 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc626)
    %359 = "ttir.add"(%357, %arg44, %358) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc626)
    %360 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc627)
    %361 = "ttir.relu"(%359, %360) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc627)
    %362 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc628)
    %363 = "ttir.transpose"(%361, %362) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc628)
    %364 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc629)
    %365 = "ttir.transpose"(%363, %364) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc629)
    %366 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc630)
    %367 = "ttir.conv2d"(%365, %arg129, %366) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<128x128x3x3xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc630)
    %368 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc631)
    %369 = "ttir.transpose"(%367, %368) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x128xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc631)
    %370 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc632)
    %371 = "ttir.transpose"(%369, %370) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc632)
    %372 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc633)
    %373 = "ttir.multiply"(%371, %arg45, %372) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc633)
    %374 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc634)
    %375 = "ttir.add"(%373, %arg46, %374) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<128x1x1xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc634)
    %376 = tensor.empty() : tensor<1x128x28x28xf32> loc(#loc635)
    %377 = "ttir.relu"(%375, %376) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x128x28x28xf32>) -> tensor<1x128x28x28xf32> loc(#loc635)
    %378 = tensor.empty() : tensor<1x28x128x28xf32> loc(#loc636)
    %379 = "ttir.transpose"(%377, %378) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x128x28x28xf32>, tensor<1x28x128x28xf32>) -> tensor<1x28x128x28xf32> loc(#loc636)
    %380 = tensor.empty() : tensor<1x28x28x128xf32> loc(#loc637)
    %381 = "ttir.transpose"(%379, %380) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x128x28xf32>, tensor<1x28x28x128xf32>) -> tensor<1x28x28x128xf32> loc(#loc637)
    %382 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc638)
    %383 = "ttir.conv2d"(%381, %arg130, %382) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x128xf32>, tensor<512x128x1x1xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc638)
    %384 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc639)
    %385 = "ttir.transpose"(%383, %384) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x512xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc639)
    %386 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc640)
    %387 = "ttir.transpose"(%385, %386) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc640)
    %388 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc641)
    %389 = "ttir.multiply"(%387, %arg47, %388) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc641)
    %390 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc642)
    %391 = "ttir.add"(%389, %arg48, %390) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<512x1x1xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc642)
    %392 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc643)
    %393 = "ttir.add"(%391, %345, %392) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc643)
    %394 = tensor.empty() : tensor<1x512x28x28xf32> loc(#loc644)
    %395 = "ttir.relu"(%393, %394) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x512x28x28xf32>) -> tensor<1x512x28x28xf32> loc(#loc644)
    %396 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc645)
    %397 = "ttir.transpose"(%395, %396) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc645)
    %398 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc646)
    %399 = "ttir.transpose"(%397, %398) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc646)
    %400 = tensor.empty() : tensor<1x28x28x256xf32> loc(#loc647)
    %401 = "ttir.conv2d"(%399, %arg131, %400) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x512xf32>, tensor<256x512x1x1xf32>, tensor<1x28x28x256xf32>) -> tensor<1x28x28x256xf32> loc(#loc647)
    %402 = tensor.empty() : tensor<1x28x256x28xf32> loc(#loc648)
    %403 = "ttir.transpose"(%401, %402) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x28x256xf32>, tensor<1x28x256x28xf32>) -> tensor<1x28x256x28xf32> loc(#loc648)
    %404 = tensor.empty() : tensor<1x256x28x28xf32> loc(#loc649)
    %405 = "ttir.transpose"(%403, %404) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x256x28xf32>, tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32> loc(#loc649)
    %406 = tensor.empty() : tensor<1x256x28x28xf32> loc(#loc650)
    %407 = "ttir.multiply"(%405, %arg49, %406) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x28x28xf32>, tensor<256x1x1xf32>, tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32> loc(#loc650)
    %408 = tensor.empty() : tensor<1x256x28x28xf32> loc(#loc651)
    %409 = "ttir.add"(%407, %arg50, %408) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x28x28xf32>, tensor<256x1x1xf32>, tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32> loc(#loc651)
    %410 = tensor.empty() : tensor<1x256x28x28xf32> loc(#loc652)
    %411 = "ttir.relu"(%409, %410) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x28x28xf32>, tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32> loc(#loc652)
    %412 = tensor.empty() : tensor<1x28x256x28xf32> loc(#loc653)
    %413 = "ttir.transpose"(%411, %412) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x28x28xf32>, tensor<1x28x256x28xf32>) -> tensor<1x28x256x28xf32> loc(#loc653)
    %414 = tensor.empty() : tensor<1x28x28x256xf32> loc(#loc654)
    %415 = "ttir.transpose"(%413, %414) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x256x28xf32>, tensor<1x28x28x256xf32>) -> tensor<1x28x28x256xf32> loc(#loc654)
    %416 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc655)
    %417 = "ttir.conv2d"(%415, %arg132, %416) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc655)
    %418 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc656)
    %419 = "ttir.transpose"(%417, %418) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc656)
    %420 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc657)
    %421 = "ttir.transpose"(%419, %420) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc657)
    %422 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc658)
    %423 = "ttir.multiply"(%421, %arg51, %422) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc658)
    %424 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc659)
    %425 = "ttir.add"(%423, %arg52, %424) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc659)
    %426 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc660)
    %427 = "ttir.relu"(%425, %426) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc660)
    %428 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc661)
    %429 = "ttir.transpose"(%427, %428) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc661)
    %430 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc662)
    %431 = "ttir.transpose"(%429, %430) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc662)
    %432 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc663)
    %433 = "ttir.conv2d"(%431, %arg133, %432) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc663)
    %434 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc664)
    %435 = "ttir.transpose"(%433, %434) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc664)
    %436 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc665)
    %437 = "ttir.transpose"(%435, %436) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc665)
    %438 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc666)
    %439 = "ttir.multiply"(%437, %arg53, %438) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc666)
    %440 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc667)
    %441 = "ttir.add"(%439, %arg54, %440) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc667)
    %442 = tensor.empty() : tensor<1x28x512x28xf32> loc(#loc668)
    %443 = "ttir.transpose"(%395, %442) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x28x28xf32>, tensor<1x28x512x28xf32>) -> tensor<1x28x512x28xf32> loc(#loc668)
    %444 = tensor.empty() : tensor<1x28x28x512xf32> loc(#loc669)
    %445 = "ttir.transpose"(%443, %444) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x28x512x28xf32>, tensor<1x28x28x512xf32>) -> tensor<1x28x28x512xf32> loc(#loc669)
    %446 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc670)
    %447 = "ttir.conv2d"(%445, %arg134, %446) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x28x28x512xf32>, tensor<1024x512x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc670)
    %448 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc671)
    %449 = "ttir.transpose"(%447, %448) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc671)
    %450 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc672)
    %451 = "ttir.transpose"(%449, %450) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc672)
    %452 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc673)
    %453 = "ttir.multiply"(%451, %arg55, %452) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc673)
    %454 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc674)
    %455 = "ttir.add"(%453, %arg56, %454) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc674)
    %456 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc675)
    %457 = "ttir.add"(%441, %455, %456) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc675)
    %458 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc676)
    %459 = "ttir.relu"(%457, %458) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc676)
    %460 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc677)
    %461 = "ttir.transpose"(%459, %460) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc677)
    %462 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc678)
    %463 = "ttir.transpose"(%461, %462) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc678)
    %464 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc679)
    %465 = "ttir.conv2d"(%463, %arg135, %464) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<256x1024x1x1xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc679)
    %466 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc680)
    %467 = "ttir.transpose"(%465, %466) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc680)
    %468 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc681)
    %469 = "ttir.transpose"(%467, %468) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc681)
    %470 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc682)
    %471 = "ttir.multiply"(%469, %arg57, %470) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc682)
    %472 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc683)
    %473 = "ttir.add"(%471, %arg58, %472) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc683)
    %474 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc684)
    %475 = "ttir.relu"(%473, %474) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc684)
    %476 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc685)
    %477 = "ttir.transpose"(%475, %476) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc685)
    %478 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc686)
    %479 = "ttir.transpose"(%477, %478) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc686)
    %480 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc687)
    %481 = "ttir.conv2d"(%479, %arg136, %480) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc687)
    %482 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc688)
    %483 = "ttir.transpose"(%481, %482) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc688)
    %484 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc689)
    %485 = "ttir.transpose"(%483, %484) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc689)
    %486 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc690)
    %487 = "ttir.multiply"(%485, %arg59, %486) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc690)
    %488 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc691)
    %489 = "ttir.add"(%487, %arg60, %488) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc691)
    %490 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc692)
    %491 = "ttir.relu"(%489, %490) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc692)
    %492 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc693)
    %493 = "ttir.transpose"(%491, %492) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc693)
    %494 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc694)
    %495 = "ttir.transpose"(%493, %494) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc694)
    %496 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc695)
    %497 = "ttir.conv2d"(%495, %arg137, %496) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc695)
    %498 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc696)
    %499 = "ttir.transpose"(%497, %498) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc696)
    %500 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc697)
    %501 = "ttir.transpose"(%499, %500) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc697)
    %502 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc698)
    %503 = "ttir.multiply"(%501, %arg61, %502) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc698)
    %504 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc699)
    %505 = "ttir.add"(%503, %arg62, %504) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc699)
    %506 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc700)
    %507 = "ttir.add"(%505, %459, %506) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc700)
    %508 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc701)
    %509 = "ttir.relu"(%507, %508) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc701)
    %510 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc702)
    %511 = "ttir.transpose"(%509, %510) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc702)
    %512 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc703)
    %513 = "ttir.transpose"(%511, %512) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc703)
    %514 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc704)
    %515 = "ttir.conv2d"(%513, %arg138, %514) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<256x1024x1x1xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc704)
    %516 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc705)
    %517 = "ttir.transpose"(%515, %516) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc705)
    %518 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc706)
    %519 = "ttir.transpose"(%517, %518) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc706)
    %520 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc707)
    %521 = "ttir.multiply"(%519, %arg63, %520) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc707)
    %522 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc708)
    %523 = "ttir.add"(%521, %arg64, %522) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc708)
    %524 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc709)
    %525 = "ttir.relu"(%523, %524) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc709)
    %526 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc710)
    %527 = "ttir.transpose"(%525, %526) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc710)
    %528 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc711)
    %529 = "ttir.transpose"(%527, %528) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc711)
    %530 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc712)
    %531 = "ttir.conv2d"(%529, %arg139, %530) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc712)
    %532 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc713)
    %533 = "ttir.transpose"(%531, %532) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc713)
    %534 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc714)
    %535 = "ttir.transpose"(%533, %534) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc714)
    %536 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc715)
    %537 = "ttir.multiply"(%535, %arg65, %536) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc715)
    %538 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc716)
    %539 = "ttir.add"(%537, %arg66, %538) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc716)
    %540 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc717)
    %541 = "ttir.relu"(%539, %540) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc717)
    %542 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc718)
    %543 = "ttir.transpose"(%541, %542) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc718)
    %544 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc719)
    %545 = "ttir.transpose"(%543, %544) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc719)
    %546 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc720)
    %547 = "ttir.conv2d"(%545, %arg140, %546) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc720)
    %548 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc721)
    %549 = "ttir.transpose"(%547, %548) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc721)
    %550 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc722)
    %551 = "ttir.transpose"(%549, %550) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc722)
    %552 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc723)
    %553 = "ttir.multiply"(%551, %arg67, %552) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc723)
    %554 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc724)
    %555 = "ttir.add"(%553, %arg68, %554) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc724)
    %556 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc725)
    %557 = "ttir.add"(%555, %509, %556) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc725)
    %558 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc726)
    %559 = "ttir.relu"(%557, %558) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc726)
    %560 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc727)
    %561 = "ttir.transpose"(%559, %560) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc727)
    %562 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc728)
    %563 = "ttir.transpose"(%561, %562) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc728)
    %564 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc729)
    %565 = "ttir.conv2d"(%563, %arg141, %564) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<256x1024x1x1xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc729)
    %566 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc730)
    %567 = "ttir.transpose"(%565, %566) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc730)
    %568 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc731)
    %569 = "ttir.transpose"(%567, %568) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc731)
    %570 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc732)
    %571 = "ttir.multiply"(%569, %arg69, %570) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc732)
    %572 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc733)
    %573 = "ttir.add"(%571, %arg70, %572) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc733)
    %574 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc734)
    %575 = "ttir.relu"(%573, %574) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc734)
    %576 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc735)
    %577 = "ttir.transpose"(%575, %576) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc735)
    %578 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc736)
    %579 = "ttir.transpose"(%577, %578) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc736)
    %580 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc737)
    %581 = "ttir.conv2d"(%579, %arg142, %580) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc737)
    %582 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc738)
    %583 = "ttir.transpose"(%581, %582) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc738)
    %584 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc739)
    %585 = "ttir.transpose"(%583, %584) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc739)
    %586 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc740)
    %587 = "ttir.multiply"(%585, %arg71, %586) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc740)
    %588 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc741)
    %589 = "ttir.add"(%587, %arg72, %588) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc741)
    %590 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc742)
    %591 = "ttir.relu"(%589, %590) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc742)
    %592 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc743)
    %593 = "ttir.transpose"(%591, %592) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc743)
    %594 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc744)
    %595 = "ttir.transpose"(%593, %594) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc744)
    %596 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc745)
    %597 = "ttir.conv2d"(%595, %arg143, %596) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc745)
    %598 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc746)
    %599 = "ttir.transpose"(%597, %598) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc746)
    %600 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc747)
    %601 = "ttir.transpose"(%599, %600) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc747)
    %602 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc748)
    %603 = "ttir.multiply"(%601, %arg73, %602) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc748)
    %604 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc749)
    %605 = "ttir.add"(%603, %arg74, %604) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc749)
    %606 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc750)
    %607 = "ttir.add"(%605, %559, %606) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc750)
    %608 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc751)
    %609 = "ttir.relu"(%607, %608) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc751)
    %610 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc752)
    %611 = "ttir.transpose"(%609, %610) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc752)
    %612 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc753)
    %613 = "ttir.transpose"(%611, %612) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc753)
    %614 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc754)
    %615 = "ttir.conv2d"(%613, %arg144, %614) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<256x1024x1x1xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc754)
    %616 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc755)
    %617 = "ttir.transpose"(%615, %616) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc755)
    %618 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc756)
    %619 = "ttir.transpose"(%617, %618) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc756)
    %620 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc757)
    %621 = "ttir.multiply"(%619, %arg75, %620) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc757)
    %622 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc758)
    %623 = "ttir.add"(%621, %arg76, %622) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc758)
    %624 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc759)
    %625 = "ttir.relu"(%623, %624) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc759)
    %626 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc760)
    %627 = "ttir.transpose"(%625, %626) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc760)
    %628 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc761)
    %629 = "ttir.transpose"(%627, %628) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc761)
    %630 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc762)
    %631 = "ttir.conv2d"(%629, %arg145, %630) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc762)
    %632 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc763)
    %633 = "ttir.transpose"(%631, %632) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc763)
    %634 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc764)
    %635 = "ttir.transpose"(%633, %634) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc764)
    %636 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc765)
    %637 = "ttir.multiply"(%635, %arg77, %636) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc765)
    %638 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc766)
    %639 = "ttir.add"(%637, %arg78, %638) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc766)
    %640 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc767)
    %641 = "ttir.relu"(%639, %640) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc767)
    %642 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc768)
    %643 = "ttir.transpose"(%641, %642) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc768)
    %644 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc769)
    %645 = "ttir.transpose"(%643, %644) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc769)
    %646 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc770)
    %647 = "ttir.conv2d"(%645, %arg146, %646) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc770)
    %648 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc771)
    %649 = "ttir.transpose"(%647, %648) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc771)
    %650 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc772)
    %651 = "ttir.transpose"(%649, %650) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc772)
    %652 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc773)
    %653 = "ttir.multiply"(%651, %arg79, %652) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc773)
    %654 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc774)
    %655 = "ttir.add"(%653, %arg80, %654) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc774)
    %656 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc775)
    %657 = "ttir.add"(%655, %609, %656) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc775)
    %658 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc776)
    %659 = "ttir.relu"(%657, %658) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc776)
    %660 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc777)
    %661 = "ttir.transpose"(%659, %660) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc777)
    %662 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc778)
    %663 = "ttir.transpose"(%661, %662) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc778)
    %664 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc779)
    %665 = "ttir.conv2d"(%663, %arg147, %664) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<256x1024x1x1xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc779)
    %666 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc780)
    %667 = "ttir.transpose"(%665, %666) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc780)
    %668 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc781)
    %669 = "ttir.transpose"(%667, %668) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc781)
    %670 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc782)
    %671 = "ttir.multiply"(%669, %arg81, %670) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc782)
    %672 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc783)
    %673 = "ttir.add"(%671, %arg82, %672) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc783)
    %674 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc784)
    %675 = "ttir.relu"(%673, %674) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc784)
    %676 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc785)
    %677 = "ttir.transpose"(%675, %676) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc785)
    %678 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc786)
    %679 = "ttir.transpose"(%677, %678) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc786)
    %680 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc787)
    %681 = "ttir.conv2d"(%679, %arg148, %680) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<256x256x3x3xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc787)
    %682 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc788)
    %683 = "ttir.transpose"(%681, %682) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x256xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc788)
    %684 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc789)
    %685 = "ttir.transpose"(%683, %684) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc789)
    %686 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc790)
    %687 = "ttir.multiply"(%685, %arg83, %686) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc790)
    %688 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc791)
    %689 = "ttir.add"(%687, %arg84, %688) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc791)
    %690 = tensor.empty() : tensor<1x256x14x14xf32> loc(#loc792)
    %691 = "ttir.relu"(%689, %690) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32> loc(#loc792)
    %692 = tensor.empty() : tensor<1x14x256x14xf32> loc(#loc793)
    %693 = "ttir.transpose"(%691, %692) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x256x14x14xf32>, tensor<1x14x256x14xf32>) -> tensor<1x14x256x14xf32> loc(#loc793)
    %694 = tensor.empty() : tensor<1x14x14x256xf32> loc(#loc794)
    %695 = "ttir.transpose"(%693, %694) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x256x14xf32>, tensor<1x14x14x256xf32>) -> tensor<1x14x14x256xf32> loc(#loc794)
    %696 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc795)
    %697 = "ttir.conv2d"(%695, %arg149, %696) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x256xf32>, tensor<1024x256x1x1xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc795)
    %698 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc796)
    %699 = "ttir.transpose"(%697, %698) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x1024xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc796)
    %700 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc797)
    %701 = "ttir.transpose"(%699, %700) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc797)
    %702 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc798)
    %703 = "ttir.multiply"(%701, %arg85, %702) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc798)
    %704 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc799)
    %705 = "ttir.add"(%703, %arg86, %704) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1024x1x1xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc799)
    %706 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc800)
    %707 = "ttir.add"(%705, %659, %706) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc800)
    %708 = tensor.empty() : tensor<1x1024x14x14xf32> loc(#loc801)
    %709 = "ttir.relu"(%707, %708) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x1024x14x14xf32>) -> tensor<1x1024x14x14xf32> loc(#loc801)
    %710 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc802)
    %711 = "ttir.transpose"(%709, %710) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc802)
    %712 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc803)
    %713 = "ttir.transpose"(%711, %712) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc803)
    %714 = tensor.empty() : tensor<1x14x14x512xf32> loc(#loc804)
    %715 = "ttir.conv2d"(%713, %arg150, %714) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<512x1024x1x1xf32>, tensor<1x14x14x512xf32>) -> tensor<1x14x14x512xf32> loc(#loc804)
    %716 = tensor.empty() : tensor<1x14x512x14xf32> loc(#loc805)
    %717 = "ttir.transpose"(%715, %716) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x14x512xf32>, tensor<1x14x512x14xf32>) -> tensor<1x14x512x14xf32> loc(#loc805)
    %718 = tensor.empty() : tensor<1x512x14x14xf32> loc(#loc806)
    %719 = "ttir.transpose"(%717, %718) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x512x14xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32> loc(#loc806)
    %720 = tensor.empty() : tensor<1x512x14x14xf32> loc(#loc807)
    %721 = "ttir.multiply"(%719, %arg87, %720) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x14x14xf32>, tensor<512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32> loc(#loc807)
    %722 = tensor.empty() : tensor<1x512x14x14xf32> loc(#loc808)
    %723 = "ttir.add"(%721, %arg88, %722) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x14x14xf32>, tensor<512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32> loc(#loc808)
    %724 = tensor.empty() : tensor<1x512x14x14xf32> loc(#loc809)
    %725 = "ttir.relu"(%723, %724) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x14x14xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32> loc(#loc809)
    %726 = tensor.empty() : tensor<1x14x512x14xf32> loc(#loc810)
    %727 = "ttir.transpose"(%725, %726) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x14x14xf32>, tensor<1x14x512x14xf32>) -> tensor<1x14x512x14xf32> loc(#loc810)
    %728 = tensor.empty() : tensor<1x14x14x512xf32> loc(#loc811)
    %729 = "ttir.transpose"(%727, %728) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x512x14xf32>, tensor<1x14x14x512xf32>) -> tensor<1x14x14x512xf32> loc(#loc811)
    %730 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc812)
    %731 = "ttir.conv2d"(%729, %arg151, %730) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x512xf32>, tensor<512x512x3x3xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc812)
    %732 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc813)
    %733 = "ttir.transpose"(%731, %732) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x512xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc813)
    %734 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc814)
    %735 = "ttir.transpose"(%733, %734) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc814)
    %736 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc815)
    %737 = "ttir.multiply"(%735, %arg89, %736) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc815)
    %738 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc816)
    %739 = "ttir.add"(%737, %arg90, %738) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc816)
    %740 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc817)
    %741 = "ttir.relu"(%739, %740) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc817)
    %742 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc818)
    %743 = "ttir.transpose"(%741, %742) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc818)
    %744 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc819)
    %745 = "ttir.transpose"(%743, %744) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc819)
    %746 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc820)
    %747 = "ttir.conv2d"(%745, %arg152, %746) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x512xf32>, tensor<2048x512x1x1xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc820)
    %748 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc821)
    %749 = "ttir.transpose"(%747, %748) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x2048xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc821)
    %750 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc822)
    %751 = "ttir.transpose"(%749, %750) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc822)
    %752 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc823)
    %753 = "ttir.multiply"(%751, %arg91, %752) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc823)
    %754 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc824)
    %755 = "ttir.add"(%753, %arg92, %754) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc824)
    %756 = tensor.empty() : tensor<1x14x1024x14xf32> loc(#loc825)
    %757 = "ttir.transpose"(%709, %756) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1024x14x14xf32>, tensor<1x14x1024x14xf32>) -> tensor<1x14x1024x14xf32> loc(#loc825)
    %758 = tensor.empty() : tensor<1x14x14x1024xf32> loc(#loc826)
    %759 = "ttir.transpose"(%757, %758) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x14x1024x14xf32>, tensor<1x14x14x1024xf32>) -> tensor<1x14x14x1024xf32> loc(#loc826)
    %760 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc827)
    %761 = "ttir.conv2d"(%759, %arg153, %760) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 2 : si32, stride_width = 2 : si32}> {channel_last = 1 : si32} : (tensor<1x14x14x1024xf32>, tensor<2048x1024x1x1xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc827)
    %762 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc828)
    %763 = "ttir.transpose"(%761, %762) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x2048xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc828)
    %764 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc829)
    %765 = "ttir.transpose"(%763, %764) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc829)
    %766 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc830)
    %767 = "ttir.multiply"(%765, %arg93, %766) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc830)
    %768 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc831)
    %769 = "ttir.add"(%767, %arg94, %768) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc831)
    %770 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc832)
    %771 = "ttir.add"(%755, %769, %770) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc832)
    %772 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc833)
    %773 = "ttir.relu"(%771, %772) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc833)
    %774 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc834)
    %775 = "ttir.transpose"(%773, %774) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc834)
    %776 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc835)
    %777 = "ttir.transpose"(%775, %776) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc835)
    %778 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc836)
    %779 = "ttir.conv2d"(%777, %arg154, %778) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x2048xf32>, tensor<512x2048x1x1xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc836)
    %780 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc837)
    %781 = "ttir.transpose"(%779, %780) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x512xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc837)
    %782 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc838)
    %783 = "ttir.transpose"(%781, %782) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc838)
    %784 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc839)
    %785 = "ttir.multiply"(%783, %arg95, %784) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc839)
    %786 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc840)
    %787 = "ttir.add"(%785, %arg96, %786) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc840)
    %788 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc841)
    %789 = "ttir.relu"(%787, %788) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc841)
    %790 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc842)
    %791 = "ttir.transpose"(%789, %790) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc842)
    %792 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc843)
    %793 = "ttir.transpose"(%791, %792) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc843)
    %794 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc844)
    %795 = "ttir.conv2d"(%793, %arg155, %794) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x512xf32>, tensor<512x512x3x3xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc844)
    %796 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc845)
    %797 = "ttir.transpose"(%795, %796) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x512xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc845)
    %798 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc846)
    %799 = "ttir.transpose"(%797, %798) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc846)
    %800 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc847)
    %801 = "ttir.multiply"(%799, %arg97, %800) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc847)
    %802 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc848)
    %803 = "ttir.add"(%801, %arg98, %802) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc848)
    %804 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc849)
    %805 = "ttir.relu"(%803, %804) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc849)
    %806 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc850)
    %807 = "ttir.transpose"(%805, %806) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc850)
    %808 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc851)
    %809 = "ttir.transpose"(%807, %808) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc851)
    %810 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc852)
    %811 = "ttir.conv2d"(%809, %arg156, %810) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x512xf32>, tensor<2048x512x1x1xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc852)
    %812 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc853)
    %813 = "ttir.transpose"(%811, %812) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x2048xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc853)
    %814 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc854)
    %815 = "ttir.transpose"(%813, %814) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc854)
    %816 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc855)
    %817 = "ttir.multiply"(%815, %arg99, %816) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc855)
    %818 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc856)
    %819 = "ttir.add"(%817, %arg100, %818) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc856)
    %820 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc857)
    %821 = "ttir.add"(%819, %773, %820) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc857)
    %822 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc858)
    %823 = "ttir.relu"(%821, %822) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc858)
    %824 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc859)
    %825 = "ttir.transpose"(%823, %824) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc859)
    %826 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc860)
    %827 = "ttir.transpose"(%825, %826) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc860)
    %828 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc861)
    %829 = "ttir.conv2d"(%827, %arg157, %828) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x2048xf32>, tensor<512x2048x1x1xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc861)
    %830 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc862)
    %831 = "ttir.transpose"(%829, %830) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x512xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc862)
    %832 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc863)
    %833 = "ttir.transpose"(%831, %832) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc863)
    %834 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc864)
    %835 = "ttir.multiply"(%833, %arg101, %834) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc864)
    %836 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc865)
    %837 = "ttir.add"(%835, %arg102, %836) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc865)
    %838 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc866)
    %839 = "ttir.relu"(%837, %838) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc866)
    %840 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc867)
    %841 = "ttir.transpose"(%839, %840) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc867)
    %842 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc868)
    %843 = "ttir.transpose"(%841, %842) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc868)
    %844 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc869)
    %845 = "ttir.conv2d"(%843, %arg158, %844) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 1 : si32, padding_left = 1 : si32, padding_right = 1 : si32, padding_top = 1 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x512xf32>, tensor<512x512x3x3xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc869)
    %846 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc870)
    %847 = "ttir.transpose"(%845, %846) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x512xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc870)
    %848 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc871)
    %849 = "ttir.transpose"(%847, %848) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc871)
    %850 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc872)
    %851 = "ttir.multiply"(%849, %arg103, %850) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc872)
    %852 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc873)
    %853 = "ttir.add"(%851, %arg104, %852) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<512x1x1xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc873)
    %854 = tensor.empty() : tensor<1x512x7x7xf32> loc(#loc874)
    %855 = "ttir.relu"(%853, %854) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x512x7x7xf32>) -> tensor<1x512x7x7xf32> loc(#loc874)
    %856 = tensor.empty() : tensor<1x7x512x7xf32> loc(#loc875)
    %857 = "ttir.transpose"(%855, %856) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x512x7x7xf32>, tensor<1x7x512x7xf32>) -> tensor<1x7x512x7xf32> loc(#loc875)
    %858 = tensor.empty() : tensor<1x7x7x512xf32> loc(#loc876)
    %859 = "ttir.transpose"(%857, %858) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x512x7xf32>, tensor<1x7x7x512xf32>) -> tensor<1x7x7x512xf32> loc(#loc876)
    %860 = tensor.empty() : tensor<1x7x7x2048xf32> loc(#loc877)
    %861 = "ttir.conv2d"(%859, %arg159, %860) <{dilation_height = 1 : si32, dilation_width = 1 : si32, groups = 1 : si32, operand_constraints = [#any_device, #any_device, #any_device], padding_bottom = 0 : si32, padding_left = 0 : si32, padding_right = 0 : si32, padding_top = 0 : si32, stride_height = 1 : si32, stride_width = 1 : si32}> {channel_last = 1 : si32} : (tensor<1x7x7x512xf32>, tensor<2048x512x1x1xf32>, tensor<1x7x7x2048xf32>) -> tensor<1x7x7x2048xf32> loc(#loc877)
    %862 = tensor.empty() : tensor<1x7x2048x7xf32> loc(#loc878)
    %863 = "ttir.transpose"(%861, %862) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x7x2048xf32>, tensor<1x7x2048x7xf32>) -> tensor<1x7x2048x7xf32> loc(#loc878)
    %864 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc879)
    %865 = "ttir.transpose"(%863, %864) <{dim0 = -3 : si32, dim1 = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x7x2048x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc879)
    %866 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc880)
    %867 = "ttir.multiply"(%865, %arg105, %866) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc880)
    %868 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc881)
    %869 = "ttir.add"(%867, %arg106, %868) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<2048x1x1xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc881)
    %870 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc882)
    %871 = "ttir.add"(%869, %823, %870) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc882)
    %872 = tensor.empty() : tensor<1x2048x7x7xf32> loc(#loc883)
    %873 = "ttir.relu"(%871, %872) <{operandSegmentSizes = array<i32: 1, 1>, operand_constraints = [#any_device, #any_device]}> : (tensor<1x2048x7x7xf32>, tensor<1x2048x7x7xf32>) -> tensor<1x2048x7x7xf32> loc(#loc883)
    %874 = tensor.empty() : tensor<1x1x2048x49xf32> loc(#loc884)
    %875 = "ttir.reshape"(%873, %874) <{operand_constraints = [#any_device, #any_device], shape = [1 : i32, 1 : i32, 2048 : i32, 49 : i32]}> : (tensor<1x2048x7x7xf32>, tensor<1x1x2048x49xf32>) -> tensor<1x1x2048x49xf32> loc(#loc884)
    %876 = tensor.empty() : tensor<1x1x49x2048xf32> loc(#loc885)
    %877 = "ttir.transpose"(%875, %876) <{dim0 = -2 : si32, dim1 = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x1x2048x49xf32>, tensor<1x1x49x2048xf32>) -> tensor<1x1x49x2048xf32> loc(#loc885)
    %878 = tensor.empty() : tensor<1x1x1x2048xf32> loc(#loc886)
    %879 = "ttir.mean"(%877, %878) <{keep_dim = true, operand_constraints = [#any_device, #any_device]}> {dim = -2 : si32} : (tensor<1x1x49x2048xf32>, tensor<1x1x1x2048xf32>) -> tensor<1x1x1x2048xf32> loc(#loc886)
    %880 = tensor.empty() : tensor<1x2048x1x1xf32> loc(#loc887)
    %881 = "ttir.reshape"(%879, %880) <{operand_constraints = [#any_device, #any_device], shape = [1 : i32, 2048 : i32, 1 : i32, 1 : i32]}> : (tensor<1x1x1x2048xf32>, tensor<1x2048x1x1xf32>) -> tensor<1x2048x1x1xf32> loc(#loc887)
    %882 = tensor.empty() : tensor<1x2048x1xf32> loc(#loc888)
    %883 = "ttir.squeeze"(%881, %882) <{dim = -2 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x2048x1x1xf32>, tensor<1x2048x1xf32>) -> tensor<1x2048x1xf32> loc(#loc888)
    %884 = tensor.empty() : tensor<1x2048xf32> loc(#loc889)
    %885 = "ttir.squeeze"(%883, %884) <{dim = -1 : si32, operand_constraints = [#any_device, #any_device]}> : (tensor<1x2048x1xf32>, tensor<1x2048xf32>) -> tensor<1x2048xf32> loc(#loc889)
    %886 = tensor.empty() : tensor<1x1000xf32> loc(#loc890)
    %887 = "ttir.matmul"(%885, %arg160, %886) <{operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x2048xf32>, tensor<2048x1000xf32>, tensor<1x1000xf32>) -> tensor<1x1000xf32> loc(#loc890)
    %888 = tensor.empty() : tensor<1x1000xf32> loc(#loc891)
    %889 = "ttir.add"(%887, %arg161, %888) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<1x1000xf32>, tensor<1000xf32>, tensor<1x1000xf32>) -> tensor<1x1000xf32> loc(#loc891)
    return %889 : tensor<1x1000xf32> loc(#loc446)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("forward":4294967295:2951)
#loc2 = loc("forward":4294967295:2952)
#loc3 = loc("forward":4294967295:2954)
#loc4 = loc("forward":4294967295:2955)
#loc5 = loc("forward":4294967295:2956)
#loc6 = loc("forward":4294967295:2958)
#loc7 = loc("forward":4294967295:2960)
#loc8 = loc("forward":4294967295:2961)
#loc9 = loc("forward":4294967295:2962)
#loc10 = loc("forward":4294967295:2963)
#loc11 = loc("forward":4294967295:2964)
#loc12 = loc("forward":4294967295:2966)
#loc13 = loc("forward":4294967295:2967)
#loc14 = loc("forward":4294967295:2968)
#loc15 = loc("forward":4294967295:2970)
#loc16 = loc("forward":4294967295:2972)
#loc17 = loc("forward":4294967295:2973)
#loc18 = loc("forward":4294967295:2974)
#loc19 = loc("forward":4294967295:2975)
#loc20 = loc("forward":4294967295:2977)
#loc21 = loc("forward":4294967295:2978)
#loc22 = loc("forward":4294967295:2979)
#loc23 = loc("forward":4294967295:2981)
#loc24 = loc("forward":4294967295:2983)
#loc25 = loc("forward":4294967295:2984)
#loc26 = loc("forward":4294967295:2985)
#loc27 = loc("forward":4294967295:2986)
#loc28 = loc("forward":4294967295:2988)
#loc29 = loc("forward":4294967295:2989)
#loc30 = loc("forward":4294967295:2990)
#loc31 = loc("forward":4294967295:2992)
#loc32 = loc("forward":4294967295:2994)
#loc33 = loc("forward":4294967295:2995)
#loc34 = loc("forward":4294967295:2996)
#loc35 = loc("forward":4294967295:2998)
#loc36 = loc("forward":4294967295:2999)
#loc37 = loc("forward":4294967295:3000)
#loc38 = loc("forward":4294967295:3002)
#loc39 = loc("forward":4294967295:3004)
#loc40 = loc("forward":4294967295:3005)
#loc41 = loc("forward":4294967295:3006)
#loc42 = loc("forward":4294967295:3007)
#loc43 = loc("forward":4294967295:3008)
#loc44 = loc("forward":4294967295:3010)
#loc45 = loc("forward":4294967295:3011)
#loc46 = loc("forward":4294967295:3012)
#loc47 = loc("forward":4294967295:3014)
#loc48 = loc("forward":4294967295:3016)
#loc49 = loc("forward":4294967295:3017)
#loc50 = loc("forward":4294967295:3018)
#loc51 = loc("forward":4294967295:3019)
#loc52 = loc("forward":4294967295:3021)
#loc53 = loc("forward":4294967295:3022)
#loc54 = loc("forward":4294967295:3023)
#loc55 = loc("forward":4294967295:3025)
#loc56 = loc("forward":4294967295:3027)
#loc57 = loc("forward":4294967295:3028)
#loc58 = loc("forward":4294967295:3029)
#loc59 = loc("forward":4294967295:3030)
#loc60 = loc("forward":4294967295:3032)
#loc61 = loc("forward":4294967295:3033)
#loc62 = loc("forward":4294967295:3034)
#loc63 = loc("forward":4294967295:3036)
#loc64 = loc("forward":4294967295:3038)
#loc65 = loc("forward":4294967295:3039)
#loc66 = loc("forward":4294967295:3040)
#loc67 = loc("forward":4294967295:3041)
#loc68 = loc("forward":4294967295:3042)
#loc69 = loc("forward":4294967295:3044)
#loc70 = loc("forward":4294967295:3045)
#loc71 = loc("forward":4294967295:3046)
#loc72 = loc("forward":4294967295:3048)
#loc73 = loc("forward":4294967295:3050)
#loc74 = loc("forward":4294967295:3051)
#loc75 = loc("forward":4294967295:3052)
#loc76 = loc("forward":4294967295:3053)
#loc77 = loc("forward":4294967295:3055)
#loc78 = loc("forward":4294967295:3056)
#loc79 = loc("forward":4294967295:3057)
#loc80 = loc("forward":4294967295:3059)
#loc81 = loc("forward":4294967295:3061)
#loc82 = loc("forward":4294967295:3062)
#loc83 = loc("forward":4294967295:3063)
#loc84 = loc("forward":4294967295:3064)
#loc85 = loc("forward":4294967295:3066)
#loc86 = loc("forward":4294967295:3067)
#loc87 = loc("forward":4294967295:3068)
#loc88 = loc("forward":4294967295:3070)
#loc89 = loc("forward":4294967295:3072)
#loc90 = loc("forward":4294967295:3073)
#loc91 = loc("forward":4294967295:3074)
#loc92 = loc("forward":4294967295:3075)
#loc93 = loc("forward":4294967295:3076)
#loc94 = loc("forward":4294967295:3078)
#loc95 = loc("forward":4294967295:3079)
#loc96 = loc("forward":4294967295:3080)
#loc97 = loc("forward":4294967295:3082)
#loc98 = loc("forward":4294967295:3084)
#loc99 = loc("forward":4294967295:3085)
#loc100 = loc("forward":4294967295:3086)
#loc101 = loc("forward":4294967295:3087)
#loc102 = loc("forward":4294967295:3089)
#loc103 = loc("forward":4294967295:3090)
#loc104 = loc("forward":4294967295:3091)
#loc105 = loc("forward":4294967295:3093)
#loc106 = loc("forward":4294967295:3095)
#loc107 = loc("forward":4294967295:3096)
#loc108 = loc("forward":4294967295:3097)
#loc109 = loc("forward":4294967295:3098)
#loc110 = loc("forward":4294967295:3100)
#loc111 = loc("forward":4294967295:3101)
#loc112 = loc("forward":4294967295:3102)
#loc113 = loc("forward":4294967295:3104)
#loc114 = loc("forward":4294967295:3106)
#loc115 = loc("forward":4294967295:3107)
#loc116 = loc("forward":4294967295:3108)
#loc117 = loc("forward":4294967295:3110)
#loc118 = loc("forward":4294967295:3111)
#loc119 = loc("forward":4294967295:3112)
#loc120 = loc("forward":4294967295:3114)
#loc121 = loc("forward":4294967295:3116)
#loc122 = loc("forward":4294967295:3117)
#loc123 = loc("forward":4294967295:3118)
#loc124 = loc("forward":4294967295:3119)
#loc125 = loc("forward":4294967295:3120)
#loc126 = loc("forward":4294967295:3122)
#loc127 = loc("forward":4294967295:3123)
#loc128 = loc("forward":4294967295:3124)
#loc129 = loc("forward":4294967295:3126)
#loc130 = loc("forward":4294967295:3128)
#loc131 = loc("forward":4294967295:3129)
#loc132 = loc("forward":4294967295:3130)
#loc133 = loc("forward":4294967295:3131)
#loc134 = loc("forward":4294967295:3133)
#loc135 = loc("forward":4294967295:3134)
#loc136 = loc("forward":4294967295:3135)
#loc137 = loc("forward":4294967295:3137)
#loc138 = loc("forward":4294967295:3139)
#loc139 = loc("forward":4294967295:3140)
#loc140 = loc("forward":4294967295:3141)
#loc141 = loc("forward":4294967295:3142)
#loc142 = loc("forward":4294967295:3144)
#loc143 = loc("forward":4294967295:3145)
#loc144 = loc("forward":4294967295:3146)
#loc145 = loc("forward":4294967295:3148)
#loc146 = loc("forward":4294967295:3150)
#loc147 = loc("forward":4294967295:3151)
#loc148 = loc("forward":4294967295:3152)
#loc149 = loc("forward":4294967295:3153)
#loc150 = loc("forward":4294967295:3154)
#loc151 = loc("forward":4294967295:3156)
#loc152 = loc("forward":4294967295:3157)
#loc153 = loc("forward":4294967295:3158)
#loc154 = loc("forward":4294967295:3160)
#loc155 = loc("forward":4294967295:3162)
#loc156 = loc("forward":4294967295:3163)
#loc157 = loc("forward":4294967295:3164)
#loc158 = loc("forward":4294967295:3165)
#loc159 = loc("forward":4294967295:3167)
#loc160 = loc("forward":4294967295:3168)
#loc161 = loc("forward":4294967295:3169)
#loc162 = loc("forward":4294967295:3171)
#loc163 = loc("forward":4294967295:3173)
#loc164 = loc("forward":4294967295:3174)
#loc165 = loc("forward":4294967295:3175)
#loc166 = loc("forward":4294967295:3176)
#loc167 = loc("forward":4294967295:3178)
#loc168 = loc("forward":4294967295:3179)
#loc169 = loc("forward":4294967295:3180)
#loc170 = loc("forward":4294967295:3182)
#loc171 = loc("forward":4294967295:3184)
#loc172 = loc("forward":4294967295:3185)
#loc173 = loc("forward":4294967295:3186)
#loc174 = loc("forward":4294967295:3187)
#loc175 = loc("forward":4294967295:3188)
#loc176 = loc("forward":4294967295:3190)
#loc177 = loc("forward":4294967295:3191)
#loc178 = loc("forward":4294967295:3192)
#loc179 = loc("forward":4294967295:3194)
#loc180 = loc("forward":4294967295:3196)
#loc181 = loc("forward":4294967295:3197)
#loc182 = loc("forward":4294967295:3198)
#loc183 = loc("forward":4294967295:3199)
#loc184 = loc("forward":4294967295:3201)
#loc185 = loc("forward":4294967295:3202)
#loc186 = loc("forward":4294967295:3203)
#loc187 = loc("forward":4294967295:3205)
#loc188 = loc("forward":4294967295:3207)
#loc189 = loc("forward":4294967295:3208)
#loc190 = loc("forward":4294967295:3209)
#loc191 = loc("forward":4294967295:3210)
#loc192 = loc("forward":4294967295:3212)
#loc193 = loc("forward":4294967295:3213)
#loc194 = loc("forward":4294967295:3214)
#loc195 = loc("forward":4294967295:3216)
#loc196 = loc("forward":4294967295:3218)
#loc197 = loc("forward":4294967295:3219)
#loc198 = loc("forward":4294967295:3220)
#loc199 = loc("forward":4294967295:3221)
#loc200 = loc("forward":4294967295:3222)
#loc201 = loc("forward":4294967295:3224)
#loc202 = loc("forward":4294967295:3225)
#loc203 = loc("forward":4294967295:3226)
#loc204 = loc("forward":4294967295:3228)
#loc205 = loc("forward":4294967295:3230)
#loc206 = loc("forward":4294967295:3231)
#loc207 = loc("forward":4294967295:3232)
#loc208 = loc("forward":4294967295:3233)
#loc209 = loc("forward":4294967295:3235)
#loc210 = loc("forward":4294967295:3236)
#loc211 = loc("forward":4294967295:3237)
#loc212 = loc("forward":4294967295:3239)
#loc213 = loc("forward":4294967295:3241)
#loc214 = loc("forward":4294967295:3242)
#loc215 = loc("forward":4294967295:3243)
#loc216 = loc("forward":4294967295:3244)
#loc217 = loc("forward":4294967295:3246)
#loc218 = loc("forward":4294967295:3247)
#loc219 = loc("forward":4294967295:3248)
#loc220 = loc("forward":4294967295:3250)
#loc221 = loc("forward":4294967295:3252)
#loc222 = loc("forward":4294967295:3253)
#loc223 = loc("forward":4294967295:3254)
#loc224 = loc("forward":4294967295:3256)
#loc225 = loc("forward":4294967295:3257)
#loc226 = loc("forward":4294967295:3258)
#loc227 = loc("forward":4294967295:3260)
#loc228 = loc("forward":4294967295:3262)
#loc229 = loc("forward":4294967295:3263)
#loc230 = loc("forward":4294967295:3264)
#loc231 = loc("forward":4294967295:3265)
#loc232 = loc("forward":4294967295:3266)
#loc233 = loc("forward":4294967295:3268)
#loc234 = loc("forward":4294967295:3269)
#loc235 = loc("forward":4294967295:3270)
#loc236 = loc("forward":4294967295:3272)
#loc237 = loc("forward":4294967295:3274)
#loc238 = loc("forward":4294967295:3275)
#loc239 = loc("forward":4294967295:3276)
#loc240 = loc("forward":4294967295:3277)
#loc241 = loc("forward":4294967295:3279)
#loc242 = loc("forward":4294967295:3280)
#loc243 = loc("forward":4294967295:3281)
#loc244 = loc("forward":4294967295:3283)
#loc245 = loc("forward":4294967295:3285)
#loc246 = loc("forward":4294967295:3286)
#loc247 = loc("forward":4294967295:3287)
#loc248 = loc("forward":4294967295:3288)
#loc249 = loc("forward":4294967295:3290)
#loc250 = loc("forward":4294967295:3291)
#loc251 = loc("forward":4294967295:3292)
#loc252 = loc("forward":4294967295:3294)
#loc253 = loc("forward":4294967295:3296)
#loc254 = loc("forward":4294967295:3297)
#loc255 = loc("forward":4294967295:3298)
#loc256 = loc("forward":4294967295:3299)
#loc257 = loc("forward":4294967295:3300)
#loc258 = loc("forward":4294967295:3302)
#loc259 = loc("forward":4294967295:3303)
#loc260 = loc("forward":4294967295:3304)
#loc261 = loc("forward":4294967295:3306)
#loc262 = loc("forward":4294967295:3308)
#loc263 = loc("forward":4294967295:3309)
#loc264 = loc("forward":4294967295:3310)
#loc265 = loc("forward":4294967295:3311)
#loc266 = loc("forward":4294967295:3313)
#loc267 = loc("forward":4294967295:3314)
#loc268 = loc("forward":4294967295:3315)
#loc269 = loc("forward":4294967295:3317)
#loc270 = loc("forward":4294967295:3319)
#loc271 = loc("forward":4294967295:3320)
#loc272 = loc("forward":4294967295:3321)
#loc273 = loc("forward":4294967295:3322)
#loc274 = loc("forward":4294967295:3324)
#loc275 = loc("forward":4294967295:3325)
#loc276 = loc("forward":4294967295:3326)
#loc277 = loc("forward":4294967295:3328)
#loc278 = loc("forward":4294967295:3330)
#loc279 = loc("forward":4294967295:3331)
#loc280 = loc("forward":4294967295:3332)
#loc281 = loc("forward":4294967295:3333)
#loc282 = loc("forward":4294967295:3334)
#loc283 = loc("forward":4294967295:3336)
#loc284 = loc("forward":4294967295:3337)
#loc285 = loc("forward":4294967295:3338)
#loc286 = loc("forward":4294967295:3340)
#loc287 = loc("forward":4294967295:3342)
#loc288 = loc("forward":4294967295:3343)
#loc289 = loc("forward":4294967295:3344)
#loc290 = loc("forward":4294967295:3345)
#loc291 = loc("forward":4294967295:3347)
#loc292 = loc("forward":4294967295:3348)
#loc293 = loc("forward":4294967295:3349)
#loc294 = loc("forward":4294967295:3351)
#loc295 = loc("forward":4294967295:3353)
#loc296 = loc("forward":4294967295:3354)
#loc297 = loc("forward":4294967295:3355)
#loc298 = loc("forward":4294967295:3356)
#loc299 = loc("forward":4294967295:3358)
#loc300 = loc("forward":4294967295:3359)
#loc301 = loc("forward":4294967295:3360)
#loc302 = loc("forward":4294967295:3362)
#loc303 = loc("forward":4294967295:3364)
#loc304 = loc("forward":4294967295:3365)
#loc305 = loc("forward":4294967295:3366)
#loc306 = loc("forward":4294967295:3367)
#loc307 = loc("forward":4294967295:3368)
#loc308 = loc("forward":4294967295:3370)
#loc309 = loc("forward":4294967295:3371)
#loc310 = loc("forward":4294967295:3372)
#loc311 = loc("forward":4294967295:3374)
#loc312 = loc("forward":4294967295:3376)
#loc313 = loc("forward":4294967295:3377)
#loc314 = loc("forward":4294967295:3378)
#loc315 = loc("forward":4294967295:3379)
#loc316 = loc("forward":4294967295:3381)
#loc317 = loc("forward":4294967295:3382)
#loc318 = loc("forward":4294967295:3383)
#loc319 = loc("forward":4294967295:3385)
#loc320 = loc("forward":4294967295:3387)
#loc321 = loc("forward":4294967295:3388)
#loc322 = loc("forward":4294967295:3389)
#loc323 = loc("forward":4294967295:3390)
#loc324 = loc("forward":4294967295:3392)
#loc325 = loc("forward":4294967295:3393)
#loc326 = loc("forward":4294967295:3394)
#loc327 = loc("forward":4294967295:3396)
#loc328 = loc("forward":4294967295:3398)
#loc329 = loc("forward":4294967295:3399)
#loc330 = loc("forward":4294967295:3400)
#loc331 = loc("forward":4294967295:3401)
#loc332 = loc("forward":4294967295:3402)
#loc333 = loc("forward":4294967295:3404)
#loc334 = loc("forward":4294967295:3405)
#loc335 = loc("forward":4294967295:3406)
#loc336 = loc("forward":4294967295:3408)
#loc337 = loc("forward":4294967295:3410)
#loc338 = loc("forward":4294967295:3411)
#loc339 = loc("forward":4294967295:3412)
#loc340 = loc("forward":4294967295:3413)
#loc341 = loc("forward":4294967295:3415)
#loc342 = loc("forward":4294967295:3416)
#loc343 = loc("forward":4294967295:3417)
#loc344 = loc("forward":4294967295:3419)
#loc345 = loc("forward":4294967295:3421)
#loc346 = loc("forward":4294967295:3422)
#loc347 = loc("forward":4294967295:3423)
#loc348 = loc("forward":4294967295:3424)
#loc349 = loc("forward":4294967295:3426)
#loc350 = loc("forward":4294967295:3427)
#loc351 = loc("forward":4294967295:3428)
#loc352 = loc("forward":4294967295:3430)
#loc353 = loc("forward":4294967295:3432)
#loc354 = loc("forward":4294967295:3433)
#loc355 = loc("forward":4294967295:3434)
#loc356 = loc("forward":4294967295:3435)
#loc357 = loc("forward":4294967295:3436)
#loc358 = loc("forward":4294967295:3438)
#loc359 = loc("forward":4294967295:3439)
#loc360 = loc("forward":4294967295:3440)
#loc361 = loc("forward":4294967295:3442)
#loc362 = loc("forward":4294967295:3444)
#loc363 = loc("forward":4294967295:3445)
#loc364 = loc("forward":4294967295:3446)
#loc365 = loc("forward":4294967295:3447)
#loc366 = loc("forward":4294967295:3449)
#loc367 = loc("forward":4294967295:3450)
#loc368 = loc("forward":4294967295:3451)
#loc369 = loc("forward":4294967295:3453)
#loc370 = loc("forward":4294967295:3455)
#loc371 = loc("forward":4294967295:3456)
#loc372 = loc("forward":4294967295:3457)
#loc373 = loc("forward":4294967295:3458)
#loc374 = loc("forward":4294967295:3460)
#loc375 = loc("forward":4294967295:3461)
#loc376 = loc("forward":4294967295:3462)
#loc377 = loc("forward":4294967295:3464)
#loc378 = loc("forward":4294967295:3466)
#loc379 = loc("forward":4294967295:3467)
#loc380 = loc("forward":4294967295:3468)
#loc381 = loc("forward":4294967295:3470)
#loc382 = loc("forward":4294967295:3471)
#loc383 = loc("forward":4294967295:3472)
#loc384 = loc("forward":4294967295:3474)
#loc385 = loc("forward":4294967295:3476)
#loc386 = loc("forward":4294967295:3477)
#loc387 = loc("forward":4294967295:3478)
#loc388 = loc("forward":4294967295:3479)
#loc389 = loc("forward":4294967295:3480)
#loc390 = loc("forward":4294967295:3482)
#loc391 = loc("forward":4294967295:3483)
#loc392 = loc("forward":4294967295:3484)
#loc393 = loc("forward":4294967295:3486)
#loc394 = loc("forward":4294967295:3488)
#loc395 = loc("forward":4294967295:3489)
#loc396 = loc("forward":4294967295:3490)
#loc397 = loc("forward":4294967295:3491)
#loc398 = loc("forward":4294967295:3493)
#loc399 = loc("forward":4294967295:3494)
#loc400 = loc("forward":4294967295:3495)
#loc401 = loc("forward":4294967295:3497)
#loc402 = loc("forward":4294967295:3499)
#loc403 = loc("forward":4294967295:3500)
#loc404 = loc("forward":4294967295:3501)
#loc405 = loc("forward":4294967295:3502)
#loc406 = loc("forward":4294967295:3504)
#loc407 = loc("forward":4294967295:3505)
#loc408 = loc("forward":4294967295:3506)
#loc409 = loc("forward":4294967295:3508)
#loc410 = loc("forward":4294967295:3510)
#loc411 = loc("forward":4294967295:3511)
#loc412 = loc("forward":4294967295:3512)
#loc413 = loc("forward":4294967295:3513)
#loc414 = loc("forward":4294967295:3514)
#loc415 = loc("forward":4294967295:3516)
#loc416 = loc("forward":4294967295:3517)
#loc417 = loc("forward":4294967295:3518)
#loc418 = loc("forward":4294967295:3520)
#loc419 = loc("forward":4294967295:3522)
#loc420 = loc("forward":4294967295:3523)
#loc421 = loc("forward":4294967295:3524)
#loc422 = loc("forward":4294967295:3525)
#loc423 = loc("forward":4294967295:3527)
#loc424 = loc("forward":4294967295:3528)
#loc425 = loc("forward":4294967295:3529)
#loc426 = loc("forward":4294967295:3531)
#loc427 = loc("forward":4294967295:3533)
#loc428 = loc("forward":4294967295:3534)
#loc429 = loc("forward":4294967295:3535)
#loc430 = loc("forward":4294967295:3536)
#loc431 = loc("forward":4294967295:3538)
#loc432 = loc("forward":4294967295:3539)
#loc433 = loc("forward":4294967295:3540)
#loc434 = loc("forward":4294967295:3542)
#loc435 = loc("forward":4294967295:3544)
#loc436 = loc("forward":4294967295:3545)
#loc437 = loc("forward":4294967295:3546)
#loc438 = loc("forward":4294967295:3547)
#loc439 = loc("forward":4294967295:3548)
#loc440 = loc("forward":4294967295:3549)
#loc441 = loc("forward":4294967295:3550)
#loc442 = loc("forward":4294967295:3551)
#loc443 = loc("forward":4294967295:3552)
#loc444 = loc("forward":4294967295:3554)
#loc445 = loc("forward":4294967295:3556)
#loc446 = loc(unknown)
#loc447 = loc("conv2d_0.dc.transpose.0"(#loc1))
#loc448 = loc("conv2d_0.dc.transpose.1"(#loc2))
#loc449 = loc("conv2d_0.dc.conv2d.2"(#loc3))
#loc450 = loc("conv2d_0.dc.transpose.3"(#loc4))
#loc451 = loc("conv2d_0.dc.transpose.4"(#loc5))
#loc452 = loc("multiply_8"(#loc6))
#loc453 = loc("add_14"(#loc7))
#loc454 = loc("relu_15"(#loc8))
#loc455 = loc("max_pool2d_16"(#loc9))
#loc456 = loc("conv2d_17.dc.transpose.0"(#loc10))
#loc457 = loc("conv2d_17.dc.transpose.1"(#loc11))
#loc458 = loc("conv2d_17.dc.conv2d.2"(#loc12))
#loc459 = loc("conv2d_17.dc.transpose.3"(#loc13))
#loc460 = loc("conv2d_17.dc.transpose.4"(#loc14))
#loc461 = loc("multiply_25"(#loc15))
#loc462 = loc("add_31"(#loc16))
#loc463 = loc("relu_32"(#loc17))
#loc464 = loc("conv2d_33.dc.transpose.0"(#loc18))
#loc465 = loc("conv2d_33.dc.transpose.1"(#loc19))
#loc466 = loc("conv2d_33.dc.conv2d.2"(#loc20))
#loc467 = loc("conv2d_33.dc.transpose.3"(#loc21))
#loc468 = loc("conv2d_33.dc.transpose.4"(#loc22))
#loc469 = loc("multiply_41"(#loc23))
#loc470 = loc("add_47"(#loc24))
#loc471 = loc("relu_48"(#loc25))
#loc472 = loc("conv2d_49.dc.transpose.0"(#loc26))
#loc473 = loc("conv2d_49.dc.transpose.1"(#loc27))
#loc474 = loc("conv2d_49.dc.conv2d.2"(#loc28))
#loc475 = loc("conv2d_49.dc.transpose.3"(#loc29))
#loc476 = loc("conv2d_49.dc.transpose.4"(#loc30))
#loc477 = loc("multiply_57"(#loc31))
#loc478 = loc("add_63"(#loc32))
#loc479 = loc("conv2d_64.dc.transpose.0"(#loc33))
#loc480 = loc("conv2d_64.dc.transpose.1"(#loc34))
#loc481 = loc("conv2d_64.dc.conv2d.2"(#loc35))
#loc482 = loc("conv2d_64.dc.transpose.3"(#loc36))
#loc483 = loc("conv2d_64.dc.transpose.4"(#loc37))
#loc484 = loc("multiply_72"(#loc38))
#loc485 = loc("add_78"(#loc39))
#loc486 = loc("add_79"(#loc40))
#loc487 = loc("relu_80"(#loc41))
#loc488 = loc("conv2d_81.dc.transpose.0"(#loc42))
#loc489 = loc("conv2d_81.dc.transpose.1"(#loc43))
#loc490 = loc("conv2d_81.dc.conv2d.2"(#loc44))
#loc491 = loc("conv2d_81.dc.transpose.3"(#loc45))
#loc492 = loc("conv2d_81.dc.transpose.4"(#loc46))
#loc493 = loc("multiply_89"(#loc47))
#loc494 = loc("add_95"(#loc48))
#loc495 = loc("relu_96"(#loc49))
#loc496 = loc("conv2d_97.dc.transpose.0"(#loc50))
#loc497 = loc("conv2d_97.dc.transpose.1"(#loc51))
#loc498 = loc("conv2d_97.dc.conv2d.2"(#loc52))
#loc499 = loc("conv2d_97.dc.transpose.3"(#loc53))
#loc500 = loc("conv2d_97.dc.transpose.4"(#loc54))
#loc501 = loc("multiply_105"(#loc55))
#loc502 = loc("add_111"(#loc56))
#loc503 = loc("relu_112"(#loc57))
#loc504 = loc("conv2d_113.dc.transpose.0"(#loc58))
#loc505 = loc("conv2d_113.dc.transpose.1"(#loc59))
#loc506 = loc("conv2d_113.dc.conv2d.2"(#loc60))
#loc507 = loc("conv2d_113.dc.transpose.3"(#loc61))
#loc508 = loc("conv2d_113.dc.transpose.4"(#loc62))
#loc509 = loc("multiply_121"(#loc63))
#loc510 = loc("add_127"(#loc64))
#loc511 = loc("add_128"(#loc65))
#loc512 = loc("relu_129"(#loc66))
#loc513 = loc("conv2d_130.dc.transpose.0"(#loc67))
#loc514 = loc("conv2d_130.dc.transpose.1"(#loc68))
#loc515 = loc("conv2d_130.dc.conv2d.2"(#loc69))
#loc516 = loc("conv2d_130.dc.transpose.3"(#loc70))
#loc517 = loc("conv2d_130.dc.transpose.4"(#loc71))
#loc518 = loc("multiply_138"(#loc72))
#loc519 = loc("add_144"(#loc73))
#loc520 = loc("relu_145"(#loc74))
#loc521 = loc("conv2d_146.dc.transpose.0"(#loc75))
#loc522 = loc("conv2d_146.dc.transpose.1"(#loc76))
#loc523 = loc("conv2d_146.dc.conv2d.2"(#loc77))
#loc524 = loc("conv2d_146.dc.transpose.3"(#loc78))
#loc525 = loc("conv2d_146.dc.transpose.4"(#loc79))
#loc526 = loc("multiply_154"(#loc80))
#loc527 = loc("add_160"(#loc81))
#loc528 = loc("relu_161"(#loc82))
#loc529 = loc("conv2d_162.dc.transpose.0"(#loc83))
#loc530 = loc("conv2d_162.dc.transpose.1"(#loc84))
#loc531 = loc("conv2d_162.dc.conv2d.2"(#loc85))
#loc532 = loc("conv2d_162.dc.transpose.3"(#loc86))
#loc533 = loc("conv2d_162.dc.transpose.4"(#loc87))
#loc534 = loc("multiply_170"(#loc88))
#loc535 = loc("add_176"(#loc89))
#loc536 = loc("add_177"(#loc90))
#loc537 = loc("relu_178"(#loc91))
#loc538 = loc("conv2d_179.dc.transpose.0"(#loc92))
#loc539 = loc("conv2d_179.dc.transpose.1"(#loc93))
#loc540 = loc("conv2d_179.dc.conv2d.2"(#loc94))
#loc541 = loc("conv2d_179.dc.transpose.3"(#loc95))
#loc542 = loc("conv2d_179.dc.transpose.4"(#loc96))
#loc543 = loc("multiply_187"(#loc97))
#loc544 = loc("add_193"(#loc98))
#loc545 = loc("relu_194"(#loc99))
#loc546 = loc("conv2d_195.dc.transpose.0"(#loc100))
#loc547 = loc("conv2d_195.dc.transpose.1"(#loc101))
#loc548 = loc("conv2d_195.dc.conv2d.2"(#loc102))
#loc549 = loc("conv2d_195.dc.transpose.3"(#loc103))
#loc550 = loc("conv2d_195.dc.transpose.4"(#loc104))
#loc551 = loc("multiply_203"(#loc105))
#loc552 = loc("add_209"(#loc106))
#loc553 = loc("relu_210"(#loc107))
#loc554 = loc("conv2d_211.dc.transpose.0"(#loc108))
#loc555 = loc("conv2d_211.dc.transpose.1"(#loc109))
#loc556 = loc("conv2d_211.dc.conv2d.2"(#loc110))
#loc557 = loc("conv2d_211.dc.transpose.3"(#loc111))
#loc558 = loc("conv2d_211.dc.transpose.4"(#loc112))
#loc559 = loc("multiply_219"(#loc113))
#loc560 = loc("add_225"(#loc114))
#loc561 = loc("conv2d_226.dc.transpose.0"(#loc115))
#loc562 = loc("conv2d_226.dc.transpose.1"(#loc116))
#loc563 = loc("conv2d_226.dc.conv2d.2"(#loc117))
#loc564 = loc("conv2d_226.dc.transpose.3"(#loc118))
#loc565 = loc("conv2d_226.dc.transpose.4"(#loc119))
#loc566 = loc("multiply_234"(#loc120))
#loc567 = loc("add_240"(#loc121))
#loc568 = loc("add_241"(#loc122))
#loc569 = loc("relu_242"(#loc123))
#loc570 = loc("conv2d_243.dc.transpose.0"(#loc124))
#loc571 = loc("conv2d_243.dc.transpose.1"(#loc125))
#loc572 = loc("conv2d_243.dc.conv2d.2"(#loc126))
#loc573 = loc("conv2d_243.dc.transpose.3"(#loc127))
#loc574 = loc("conv2d_243.dc.transpose.4"(#loc128))
#loc575 = loc("multiply_251"(#loc129))
#loc576 = loc("add_257"(#loc130))
#loc577 = loc("relu_258"(#loc131))
#loc578 = loc("conv2d_259.dc.transpose.0"(#loc132))
#loc579 = loc("conv2d_259.dc.transpose.1"(#loc133))
#loc580 = loc("conv2d_259.dc.conv2d.2"(#loc134))
#loc581 = loc("conv2d_259.dc.transpose.3"(#loc135))
#loc582 = loc("conv2d_259.dc.transpose.4"(#loc136))
#loc583 = loc("multiply_267"(#loc137))
#loc584 = loc("add_273"(#loc138))
#loc585 = loc("relu_274"(#loc139))
#loc586 = loc("conv2d_275.dc.transpose.0"(#loc140))
#loc587 = loc("conv2d_275.dc.transpose.1"(#loc141))
#loc588 = loc("conv2d_275.dc.conv2d.2"(#loc142))
#loc589 = loc("conv2d_275.dc.transpose.3"(#loc143))
#loc590 = loc("conv2d_275.dc.transpose.4"(#loc144))
#loc591 = loc("multiply_283"(#loc145))
#loc592 = loc("add_289"(#loc146))
#loc593 = loc("add_290"(#loc147))
#loc594 = loc("relu_291"(#loc148))
#loc595 = loc("conv2d_292.dc.transpose.0"(#loc149))
#loc596 = loc("conv2d_292.dc.transpose.1"(#loc150))
#loc597 = loc("conv2d_292.dc.conv2d.2"(#loc151))
#loc598 = loc("conv2d_292.dc.transpose.3"(#loc152))
#loc599 = loc("conv2d_292.dc.transpose.4"(#loc153))
#loc600 = loc("multiply_300"(#loc154))
#loc601 = loc("add_306"(#loc155))
#loc602 = loc("relu_307"(#loc156))
#loc603 = loc("conv2d_308.dc.transpose.0"(#loc157))
#loc604 = loc("conv2d_308.dc.transpose.1"(#loc158))
#loc605 = loc("conv2d_308.dc.conv2d.2"(#loc159))
#loc606 = loc("conv2d_308.dc.transpose.3"(#loc160))
#loc607 = loc("conv2d_308.dc.transpose.4"(#loc161))
#loc608 = loc("multiply_316"(#loc162))
#loc609 = loc("add_322"(#loc163))
#loc610 = loc("relu_323"(#loc164))
#loc611 = loc("conv2d_324.dc.transpose.0"(#loc165))
#loc612 = loc("conv2d_324.dc.transpose.1"(#loc166))
#loc613 = loc("conv2d_324.dc.conv2d.2"(#loc167))
#loc614 = loc("conv2d_324.dc.transpose.3"(#loc168))
#loc615 = loc("conv2d_324.dc.transpose.4"(#loc169))
#loc616 = loc("multiply_332"(#loc170))
#loc617 = loc("add_338"(#loc171))
#loc618 = loc("add_339"(#loc172))
#loc619 = loc("relu_340"(#loc173))
#loc620 = loc("conv2d_341.dc.transpose.0"(#loc174))
#loc621 = loc("conv2d_341.dc.transpose.1"(#loc175))
#loc622 = loc("conv2d_341.dc.conv2d.2"(#loc176))
#loc623 = loc("conv2d_341.dc.transpose.3"(#loc177))
#loc624 = loc("conv2d_341.dc.transpose.4"(#loc178))
#loc625 = loc("multiply_349"(#loc179))
#loc626 = loc("add_355"(#loc180))
#loc627 = loc("relu_356"(#loc181))
#loc628 = loc("conv2d_357.dc.transpose.0"(#loc182))
#loc629 = loc("conv2d_357.dc.transpose.1"(#loc183))
#loc630 = loc("conv2d_357.dc.conv2d.2"(#loc184))
#loc631 = loc("conv2d_357.dc.transpose.3"(#loc185))
#loc632 = loc("conv2d_357.dc.transpose.4"(#loc186))
#loc633 = loc("multiply_365"(#loc187))
#loc634 = loc("add_371"(#loc188))
#loc635 = loc("relu_372"(#loc189))
#loc636 = loc("conv2d_373.dc.transpose.0"(#loc190))
#loc637 = loc("conv2d_373.dc.transpose.1"(#loc191))
#loc638 = loc("conv2d_373.dc.conv2d.2"(#loc192))
#loc639 = loc("conv2d_373.dc.transpose.3"(#loc193))
#loc640 = loc("conv2d_373.dc.transpose.4"(#loc194))
#loc641 = loc("multiply_381"(#loc195))
#loc642 = loc("add_387"(#loc196))
#loc643 = loc("add_388"(#loc197))
#loc644 = loc("relu_389"(#loc198))
#loc645 = loc("conv2d_390.dc.transpose.0"(#loc199))
#loc646 = loc("conv2d_390.dc.transpose.1"(#loc200))
#loc647 = loc("conv2d_390.dc.conv2d.2"(#loc201))
#loc648 = loc("conv2d_390.dc.transpose.3"(#loc202))
#loc649 = loc("conv2d_390.dc.transpose.4"(#loc203))
#loc650 = loc("multiply_398"(#loc204))
#loc651 = loc("add_404"(#loc205))
#loc652 = loc("relu_405"(#loc206))
#loc653 = loc("conv2d_406.dc.transpose.0"(#loc207))
#loc654 = loc("conv2d_406.dc.transpose.1"(#loc208))
#loc655 = loc("conv2d_406.dc.conv2d.2"(#loc209))
#loc656 = loc("conv2d_406.dc.transpose.3"(#loc210))
#loc657 = loc("conv2d_406.dc.transpose.4"(#loc211))
#loc658 = loc("multiply_414"(#loc212))
#loc659 = loc("add_420"(#loc213))
#loc660 = loc("relu_421"(#loc214))
#loc661 = loc("conv2d_422.dc.transpose.0"(#loc215))
#loc662 = loc("conv2d_422.dc.transpose.1"(#loc216))
#loc663 = loc("conv2d_422.dc.conv2d.2"(#loc217))
#loc664 = loc("conv2d_422.dc.transpose.3"(#loc218))
#loc665 = loc("conv2d_422.dc.transpose.4"(#loc219))
#loc666 = loc("multiply_430"(#loc220))
#loc667 = loc("add_436"(#loc221))
#loc668 = loc("conv2d_437.dc.transpose.0"(#loc222))
#loc669 = loc("conv2d_437.dc.transpose.1"(#loc223))
#loc670 = loc("conv2d_437.dc.conv2d.2"(#loc224))
#loc671 = loc("conv2d_437.dc.transpose.3"(#loc225))
#loc672 = loc("conv2d_437.dc.transpose.4"(#loc226))
#loc673 = loc("multiply_445"(#loc227))
#loc674 = loc("add_451"(#loc228))
#loc675 = loc("add_452"(#loc229))
#loc676 = loc("relu_453"(#loc230))
#loc677 = loc("conv2d_454.dc.transpose.0"(#loc231))
#loc678 = loc("conv2d_454.dc.transpose.1"(#loc232))
#loc679 = loc("conv2d_454.dc.conv2d.2"(#loc233))
#loc680 = loc("conv2d_454.dc.transpose.3"(#loc234))
#loc681 = loc("conv2d_454.dc.transpose.4"(#loc235))
#loc682 = loc("multiply_462"(#loc236))
#loc683 = loc("add_468"(#loc237))
#loc684 = loc("relu_469"(#loc238))
#loc685 = loc("conv2d_470.dc.transpose.0"(#loc239))
#loc686 = loc("conv2d_470.dc.transpose.1"(#loc240))
#loc687 = loc("conv2d_470.dc.conv2d.2"(#loc241))
#loc688 = loc("conv2d_470.dc.transpose.3"(#loc242))
#loc689 = loc("conv2d_470.dc.transpose.4"(#loc243))
#loc690 = loc("multiply_478"(#loc244))
#loc691 = loc("add_484"(#loc245))
#loc692 = loc("relu_485"(#loc246))
#loc693 = loc("conv2d_486.dc.transpose.0"(#loc247))
#loc694 = loc("conv2d_486.dc.transpose.1"(#loc248))
#loc695 = loc("conv2d_486.dc.conv2d.2"(#loc249))
#loc696 = loc("conv2d_486.dc.transpose.3"(#loc250))
#loc697 = loc("conv2d_486.dc.transpose.4"(#loc251))
#loc698 = loc("multiply_494"(#loc252))
#loc699 = loc("add_500"(#loc253))
#loc700 = loc("add_501"(#loc254))
#loc701 = loc("relu_502"(#loc255))
#loc702 = loc("conv2d_503.dc.transpose.0"(#loc256))
#loc703 = loc("conv2d_503.dc.transpose.1"(#loc257))
#loc704 = loc("conv2d_503.dc.conv2d.2"(#loc258))
#loc705 = loc("conv2d_503.dc.transpose.3"(#loc259))
#loc706 = loc("conv2d_503.dc.transpose.4"(#loc260))
#loc707 = loc("multiply_511"(#loc261))
#loc708 = loc("add_517"(#loc262))
#loc709 = loc("relu_518"(#loc263))
#loc710 = loc("conv2d_519.dc.transpose.0"(#loc264))
#loc711 = loc("conv2d_519.dc.transpose.1"(#loc265))
#loc712 = loc("conv2d_519.dc.conv2d.2"(#loc266))
#loc713 = loc("conv2d_519.dc.transpose.3"(#loc267))
#loc714 = loc("conv2d_519.dc.transpose.4"(#loc268))
#loc715 = loc("multiply_527"(#loc269))
#loc716 = loc("add_533"(#loc270))
#loc717 = loc("relu_534"(#loc271))
#loc718 = loc("conv2d_535.dc.transpose.0"(#loc272))
#loc719 = loc("conv2d_535.dc.transpose.1"(#loc273))
#loc720 = loc("conv2d_535.dc.conv2d.2"(#loc274))
#loc721 = loc("conv2d_535.dc.transpose.3"(#loc275))
#loc722 = loc("conv2d_535.dc.transpose.4"(#loc276))
#loc723 = loc("multiply_543"(#loc277))
#loc724 = loc("add_549"(#loc278))
#loc725 = loc("add_550"(#loc279))
#loc726 = loc("relu_551"(#loc280))
#loc727 = loc("conv2d_552.dc.transpose.0"(#loc281))
#loc728 = loc("conv2d_552.dc.transpose.1"(#loc282))
#loc729 = loc("conv2d_552.dc.conv2d.2"(#loc283))
#loc730 = loc("conv2d_552.dc.transpose.3"(#loc284))
#loc731 = loc("conv2d_552.dc.transpose.4"(#loc285))
#loc732 = loc("multiply_560"(#loc286))
#loc733 = loc("add_566"(#loc287))
#loc734 = loc("relu_567"(#loc288))
#loc735 = loc("conv2d_568.dc.transpose.0"(#loc289))
#loc736 = loc("conv2d_568.dc.transpose.1"(#loc290))
#loc737 = loc("conv2d_568.dc.conv2d.2"(#loc291))
#loc738 = loc("conv2d_568.dc.transpose.3"(#loc292))
#loc739 = loc("conv2d_568.dc.transpose.4"(#loc293))
#loc740 = loc("multiply_576"(#loc294))
#loc741 = loc("add_582"(#loc295))
#loc742 = loc("relu_583"(#loc296))
#loc743 = loc("conv2d_584.dc.transpose.0"(#loc297))
#loc744 = loc("conv2d_584.dc.transpose.1"(#loc298))
#loc745 = loc("conv2d_584.dc.conv2d.2"(#loc299))
#loc746 = loc("conv2d_584.dc.transpose.3"(#loc300))
#loc747 = loc("conv2d_584.dc.transpose.4"(#loc301))
#loc748 = loc("multiply_592"(#loc302))
#loc749 = loc("add_598"(#loc303))
#loc750 = loc("add_599"(#loc304))
#loc751 = loc("relu_600"(#loc305))
#loc752 = loc("conv2d_601.dc.transpose.0"(#loc306))
#loc753 = loc("conv2d_601.dc.transpose.1"(#loc307))
#loc754 = loc("conv2d_601.dc.conv2d.2"(#loc308))
#loc755 = loc("conv2d_601.dc.transpose.3"(#loc309))
#loc756 = loc("conv2d_601.dc.transpose.4"(#loc310))
#loc757 = loc("multiply_609"(#loc311))
#loc758 = loc("add_615"(#loc312))
#loc759 = loc("relu_616"(#loc313))
#loc760 = loc("conv2d_617.dc.transpose.0"(#loc314))
#loc761 = loc("conv2d_617.dc.transpose.1"(#loc315))
#loc762 = loc("conv2d_617.dc.conv2d.2"(#loc316))
#loc763 = loc("conv2d_617.dc.transpose.3"(#loc317))
#loc764 = loc("conv2d_617.dc.transpose.4"(#loc318))
#loc765 = loc("multiply_625"(#loc319))
#loc766 = loc("add_631"(#loc320))
#loc767 = loc("relu_632"(#loc321))
#loc768 = loc("conv2d_633.dc.transpose.0"(#loc322))
#loc769 = loc("conv2d_633.dc.transpose.1"(#loc323))
#loc770 = loc("conv2d_633.dc.conv2d.2"(#loc324))
#loc771 = loc("conv2d_633.dc.transpose.3"(#loc325))
#loc772 = loc("conv2d_633.dc.transpose.4"(#loc326))
#loc773 = loc("multiply_641"(#loc327))
#loc774 = loc("add_647"(#loc328))
#loc775 = loc("add_648"(#loc329))
#loc776 = loc("relu_649"(#loc330))
#loc777 = loc("conv2d_650.dc.transpose.0"(#loc331))
#loc778 = loc("conv2d_650.dc.transpose.1"(#loc332))
#loc779 = loc("conv2d_650.dc.conv2d.2"(#loc333))
#loc780 = loc("conv2d_650.dc.transpose.3"(#loc334))
#loc781 = loc("conv2d_650.dc.transpose.4"(#loc335))
#loc782 = loc("multiply_658"(#loc336))
#loc783 = loc("add_664"(#loc337))
#loc784 = loc("relu_665"(#loc338))
#loc785 = loc("conv2d_666.dc.transpose.0"(#loc339))
#loc786 = loc("conv2d_666.dc.transpose.1"(#loc340))
#loc787 = loc("conv2d_666.dc.conv2d.2"(#loc341))
#loc788 = loc("conv2d_666.dc.transpose.3"(#loc342))
#loc789 = loc("conv2d_666.dc.transpose.4"(#loc343))
#loc790 = loc("multiply_674"(#loc344))
#loc791 = loc("add_680"(#loc345))
#loc792 = loc("relu_681"(#loc346))
#loc793 = loc("conv2d_682.dc.transpose.0"(#loc347))
#loc794 = loc("conv2d_682.dc.transpose.1"(#loc348))
#loc795 = loc("conv2d_682.dc.conv2d.2"(#loc349))
#loc796 = loc("conv2d_682.dc.transpose.3"(#loc350))
#loc797 = loc("conv2d_682.dc.transpose.4"(#loc351))
#loc798 = loc("multiply_690"(#loc352))
#loc799 = loc("add_696"(#loc353))
#loc800 = loc("add_697"(#loc354))
#loc801 = loc("relu_698"(#loc355))
#loc802 = loc("conv2d_699.dc.transpose.0"(#loc356))
#loc803 = loc("conv2d_699.dc.transpose.1"(#loc357))
#loc804 = loc("conv2d_699.dc.conv2d.2"(#loc358))
#loc805 = loc("conv2d_699.dc.transpose.3"(#loc359))
#loc806 = loc("conv2d_699.dc.transpose.4"(#loc360))
#loc807 = loc("multiply_707"(#loc361))
#loc808 = loc("add_713"(#loc362))
#loc809 = loc("relu_714"(#loc363))
#loc810 = loc("conv2d_715.dc.transpose.0"(#loc364))
#loc811 = loc("conv2d_715.dc.transpose.1"(#loc365))
#loc812 = loc("conv2d_715.dc.conv2d.2"(#loc366))
#loc813 = loc("conv2d_715.dc.transpose.3"(#loc367))
#loc814 = loc("conv2d_715.dc.transpose.4"(#loc368))
#loc815 = loc("multiply_723"(#loc369))
#loc816 = loc("add_729"(#loc370))
#loc817 = loc("relu_730"(#loc371))
#loc818 = loc("conv2d_731.dc.transpose.0"(#loc372))
#loc819 = loc("conv2d_731.dc.transpose.1"(#loc373))
#loc820 = loc("conv2d_731.dc.conv2d.2"(#loc374))
#loc821 = loc("conv2d_731.dc.transpose.3"(#loc375))
#loc822 = loc("conv2d_731.dc.transpose.4"(#loc376))
#loc823 = loc("multiply_739"(#loc377))
#loc824 = loc("add_745"(#loc378))
#loc825 = loc("conv2d_746.dc.transpose.0"(#loc379))
#loc826 = loc("conv2d_746.dc.transpose.1"(#loc380))
#loc827 = loc("conv2d_746.dc.conv2d.2"(#loc381))
#loc828 = loc("conv2d_746.dc.transpose.3"(#loc382))
#loc829 = loc("conv2d_746.dc.transpose.4"(#loc383))
#loc830 = loc("multiply_754"(#loc384))
#loc831 = loc("add_760"(#loc385))
#loc832 = loc("add_761"(#loc386))
#loc833 = loc("relu_762"(#loc387))
#loc834 = loc("conv2d_763.dc.transpose.0"(#loc388))
#loc835 = loc("conv2d_763.dc.transpose.1"(#loc389))
#loc836 = loc("conv2d_763.dc.conv2d.2"(#loc390))
#loc837 = loc("conv2d_763.dc.transpose.3"(#loc391))
#loc838 = loc("conv2d_763.dc.transpose.4"(#loc392))
#loc839 = loc("multiply_771"(#loc393))
#loc840 = loc("add_777"(#loc394))
#loc841 = loc("relu_778"(#loc395))
#loc842 = loc("conv2d_779.dc.transpose.0"(#loc396))
#loc843 = loc("conv2d_779.dc.transpose.1"(#loc397))
#loc844 = loc("conv2d_779.dc.conv2d.2"(#loc398))
#loc845 = loc("conv2d_779.dc.transpose.3"(#loc399))
#loc846 = loc("conv2d_779.dc.transpose.4"(#loc400))
#loc847 = loc("multiply_787"(#loc401))
#loc848 = loc("add_793"(#loc402))
#loc849 = loc("relu_794"(#loc403))
#loc850 = loc("conv2d_795.dc.transpose.0"(#loc404))
#loc851 = loc("conv2d_795.dc.transpose.1"(#loc405))
#loc852 = loc("conv2d_795.dc.conv2d.2"(#loc406))
#loc853 = loc("conv2d_795.dc.transpose.3"(#loc407))
#loc854 = loc("conv2d_795.dc.transpose.4"(#loc408))
#loc855 = loc("multiply_803"(#loc409))
#loc856 = loc("add_809"(#loc410))
#loc857 = loc("add_810"(#loc411))
#loc858 = loc("relu_811"(#loc412))
#loc859 = loc("conv2d_812.dc.transpose.0"(#loc413))
#loc860 = loc("conv2d_812.dc.transpose.1"(#loc414))
#loc861 = loc("conv2d_812.dc.conv2d.2"(#loc415))
#loc862 = loc("conv2d_812.dc.transpose.3"(#loc416))
#loc863 = loc("conv2d_812.dc.transpose.4"(#loc417))
#loc864 = loc("multiply_820"(#loc418))
#loc865 = loc("add_826"(#loc419))
#loc866 = loc("relu_827"(#loc420))
#loc867 = loc("conv2d_828.dc.transpose.0"(#loc421))
#loc868 = loc("conv2d_828.dc.transpose.1"(#loc422))
#loc869 = loc("conv2d_828.dc.conv2d.2"(#loc423))
#loc870 = loc("conv2d_828.dc.transpose.3"(#loc424))
#loc871 = loc("conv2d_828.dc.transpose.4"(#loc425))
#loc872 = loc("multiply_836"(#loc426))
#loc873 = loc("add_842"(#loc427))
#loc874 = loc("relu_843"(#loc428))
#loc875 = loc("conv2d_844.dc.transpose.0"(#loc429))
#loc876 = loc("conv2d_844.dc.transpose.1"(#loc430))
#loc877 = loc("conv2d_844.dc.conv2d.2"(#loc431))
#loc878 = loc("conv2d_844.dc.transpose.3"(#loc432))
#loc879 = loc("conv2d_844.dc.transpose.4"(#loc433))
#loc880 = loc("multiply_852"(#loc434))
#loc881 = loc("add_858"(#loc435))
#loc882 = loc("add_859"(#loc436))
#loc883 = loc("relu_860"(#loc437))
#loc884 = loc("avg_pool2d_861.dc.reshape.0"(#loc438))
#loc885 = loc("avg_pool2d_861.dc.transpose.1.dc.transpose.0"(#loc439))
#loc886 = loc("avg_pool2d_861.dc.reduce_avg.2"(#loc440))
#loc887 = loc("avg_pool2d_861.dc.reshape.4"(#loc441))
#loc888 = loc("squeeze_863"(#loc442))
#loc889 = loc("squeeze_864"(#loc443))
#loc890 = loc("matmul_866"(#loc444))
#loc891 = loc("add_867"(#loc445))
