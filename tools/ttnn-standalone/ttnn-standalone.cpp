// SPDX-FileCopyrightText: (c) 2025 Tenstorrent AI ULC
//
// SPDX-License-Identifier: Apache-2.0


#include "ttnn-precompiled.hpp"

namespace ttnn {

::ttnn::Tensor forward(::ttnn::Tensor v1, ::ttnn::Tensor v2, ::ttnn::Tensor v3, ::ttnn::Tensor v4, ::ttnn::Tensor v5, ::ttnn::Tensor v6, ::ttnn::Tensor v7, ::ttnn::Tensor v8, ::ttnn::Tensor v9, ::ttnn::Tensor v10, ::ttnn::Tensor v11, ::ttnn::Tensor v12, ::ttnn::Tensor v13, ::ttnn::Tensor v14, ::ttnn::Tensor v15, ::ttnn::Tensor v16, ::ttnn::Tensor v17, ::ttnn::Tensor v18, ::ttnn::Tensor v19, ::ttnn::Tensor v20, ::ttnn::Tensor v21, ::ttnn::Tensor v22, ::ttnn::Tensor v23, ::ttnn::Tensor v24, ::ttnn::Tensor v25, ::ttnn::Tensor v26, ::ttnn::Tensor v27, ::ttnn::Tensor v28, ::ttnn::Tensor v29, ::ttnn::Tensor v30, ::ttnn::Tensor v31, ::ttnn::Tensor v32, ::ttnn::Tensor v33, ::ttnn::Tensor v34, ::ttnn::Tensor v35, ::ttnn::Tensor v36, ::ttnn::Tensor v37, ::ttnn::Tensor v38, ::ttnn::Tensor v39, ::ttnn::Tensor v40, ::ttnn::Tensor v41, ::ttnn::Tensor v42, ::ttnn::Tensor v43, ::ttnn::Tensor v44, ::ttnn::Tensor v45, ::ttnn::Tensor v46, ::ttnn::Tensor v47, ::ttnn::Tensor v48, ::ttnn::Tensor v49, ::ttnn::Tensor v50, ::ttnn::Tensor v51, ::ttnn::Tensor v52, ::ttnn::Tensor v53, ::ttnn::Tensor v54, ::ttnn::Tensor v55, ::ttnn::Tensor v56, ::ttnn::Tensor v57, ::ttnn::Tensor v58, ::ttnn::Tensor v59, ::ttnn::Tensor v60, ::ttnn::Tensor v61, ::ttnn::Tensor v62, ::ttnn::Tensor v63, ::ttnn::Tensor v64, ::ttnn::Tensor v65, ::ttnn::Tensor v66, ::ttnn::Tensor v67, ::ttnn::Tensor v68, ::ttnn::Tensor v69, ::ttnn::Tensor v70, ::ttnn::Tensor v71, ::ttnn::Tensor v72, ::ttnn::Tensor v73, ::ttnn::Tensor v74, ::ttnn::Tensor v75, ::ttnn::Tensor v76, ::ttnn::Tensor v77, ::ttnn::Tensor v78, ::ttnn::Tensor v79, ::ttnn::Tensor v80, ::ttnn::Tensor v81, ::ttnn::Tensor v82, ::ttnn::Tensor v83, ::ttnn::Tensor v84, ::ttnn::Tensor v85, ::ttnn::Tensor v86, ::ttnn::Tensor v87, ::ttnn::Tensor v88, ::ttnn::Tensor v89, ::ttnn::Tensor v90, ::ttnn::Tensor v91, ::ttnn::Tensor v92, ::ttnn::Tensor v93, ::ttnn::Tensor v94, ::ttnn::Tensor v95, ::ttnn::Tensor v96, ::ttnn::Tensor v97, ::ttnn::Tensor v98, ::ttnn::Tensor v99, ::ttnn::Tensor v100, ::ttnn::Tensor v101, ::ttnn::Tensor v102, ::ttnn::Tensor v103, ::ttnn::Tensor v104, ::ttnn::Tensor v105, ::ttnn::Tensor v106, ::ttnn::Tensor v107, ::ttnn::Tensor v108, ::ttnn::Tensor v109, ::ttnn::Tensor v110, ::ttnn::Tensor v111, ::ttnn::Tensor v112, ::ttnn::Tensor v113, ::ttnn::Tensor v114, ::ttnn::Tensor v115, ::ttnn::Tensor v116, ::ttnn::Tensor v117, ::ttnn::Tensor v118, ::ttnn::Tensor v119, ::ttnn::Tensor v120, ::ttnn::Tensor v121, ::ttnn::Tensor v122, ::ttnn::Tensor v123, ::ttnn::Tensor v124, ::ttnn::Tensor v125, ::ttnn::Tensor v126, ::ttnn::Tensor v127, ::ttnn::Tensor v128, ::ttnn::Tensor v129, ::ttnn::Tensor v130, ::ttnn::Tensor v131, ::ttnn::Tensor v132, ::ttnn::Tensor v133, ::ttnn::Tensor v134, ::ttnn::Tensor v135, ::ttnn::Tensor v136, ::ttnn::Tensor v137, ::ttnn::Tensor v138, ::ttnn::Tensor v139, ::ttnn::Tensor v140, ::ttnn::Tensor v141, ::ttnn::Tensor v142, ::ttnn::Tensor v143, ::ttnn::Tensor v144, ::ttnn::Tensor v145, ::ttnn::Tensor v146, ::ttnn::Tensor v147, ::ttnn::Tensor v148, ::ttnn::Tensor v149, ::ttnn::Tensor v150, ::ttnn::Tensor v151, ::ttnn::Tensor v152, ::ttnn::Tensor v153, ::ttnn::Tensor v154, ::ttnn::Tensor v155, ::ttnn::Tensor v156, ::ttnn::Tensor v157, ::ttnn::Tensor v158, ::ttnn::Tensor v159, ::ttnn::Tensor v160, ::ttnn::Tensor v161, ::ttnn::Tensor v162, ::ttnn::Tensor v163, ::ttnn::Tensor v164, ::ttnn::Tensor v165) {
  ttnn::IDevice* v166 = ttnn::DeviceGetter::getInstance(24576);
  //Tensor = ttnn::transpose(v1,1,2, MemoryConfig(memory_layout=TensorMemoryLayout::INTERLEAVED,buffer_type=BufferType::DRAM);
  ::ttnn::Tensor v167 = ttnn::transpose(v1, 1, 2, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v1, false);
  ::ttnn::Tensor v168 = ttnn::transpose(v167, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v167, false);
  ::ttnn::Tensor v169 = ttnn::reshape(v168, ::std::vector<int32_t>{1, 1, 50176, 3}, ::std::nullopt);
  ttnn::deallocate(v168, false);
  ::ttnn::Tensor v170 = ttnn::from_device(v169);
  ttnn::deallocate(v169, false);
  ::ttnn::Tensor v171 = ttnn::to_layout(v170, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v170, false);
  ::ttnn::Tensor v172 = ttnn::to_device(v171, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v171, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v173 = ttnn::conv2d(v172, v108, v166, 3, 32, 1, 224, 224, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{2, 2}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v174 = ::std::get<0>(v173);
  ttnn::deallocate(v172, false);
  ttnn::deallocate(v108, false);
  ::ttnn::Tensor v175 = ttnn::reshape(v174, ::std::vector<int32_t>{1, 112, 112, 32}, ::std::nullopt);
  ttnn::deallocate(v174, false);
  ::ttnn::Tensor v176 = ttnn::multiply(v175, v2, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v175, false);
  ttnn::deallocate(v2, false);
  ::ttnn::Tensor v177 = ttnn::add(v176, v3, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v176, false);
  ttnn::deallocate(v3, false);
  ::ttnn::Tensor v178 = ttnn::clamp(v177, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v177, false);
  ::ttnn::Tensor v179 = ttnn::reshape(v178, ::std::vector<int32_t>{1, 1, 12544, 32}, ::std::nullopt);
  ttnn::deallocate(v178, false);
  ::ttnn::Tensor v180 = ttnn::from_device(v179);
  ttnn::deallocate(v179, false);
  ::ttnn::Tensor v181 = ttnn::to_layout(v180, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v180, false);
  ::ttnn::Tensor v182 = ttnn::to_device(v181, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v181, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v183 = ttnn::conv2d(v182, v109, v166, 32, 32, 1, 112, 112, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 32, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v184 = ::std::get<0>(v183);
  ttnn::deallocate(v182, false);
  ttnn::deallocate(v109, false);
  ::ttnn::Tensor v185 = ttnn::reshape(v184, ::std::vector<int32_t>{1, 112, 112, 32}, ::std::nullopt);
  ttnn::deallocate(v184, false);
  ::ttnn::Tensor v186 = ttnn::multiply(v185, v4, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v185, false);
  ttnn::deallocate(v4, false);
  ::ttnn::Tensor v187 = ttnn::add(v186, v5, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v186, false);
  ttnn::deallocate(v5, false);
  ::ttnn::Tensor v188 = ttnn::clamp(v187, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v187, false);
  ::ttnn::Tensor v189 = ttnn::reshape(v188, ::std::vector<int32_t>{1, 1, 12544, 32}, ::std::nullopt);
  ttnn::deallocate(v188, false);
  ::ttnn::Tensor v190 = ttnn::from_device(v189);
  ttnn::deallocate(v189, false);
  ::ttnn::Tensor v191 = ttnn::to_layout(v190, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v190, false);
  ::ttnn::Tensor v192 = ttnn::to_device(v191, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v191, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v193 = ttnn::conv2d(v192, v110, v166, 32, 16, 1, 112, 112, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v194 = ::std::get<0>(v193);
  ttnn::deallocate(v192, false);
  ttnn::deallocate(v110, false);
  ::ttnn::Tensor v195 = ttnn::reshape(v194, ::std::vector<int32_t>{1, 112, 112, 16}, ::std::nullopt);
  ttnn::deallocate(v194, false);
  ::ttnn::Tensor v196 = ttnn::multiply(v195, v6, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v195, false);
  ttnn::deallocate(v6, false);
  ::ttnn::Tensor v197 = ttnn::add(v196, v7, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v196, false);
  ttnn::deallocate(v7, false);
  ::ttnn::Tensor v198 = ttnn::reshape(v197, ::std::vector<int32_t>{1, 1, 12544, 16}, ::std::nullopt);
  ttnn::deallocate(v197, false);
  ::ttnn::Tensor v199 = ttnn::from_device(v198);
  ttnn::deallocate(v198, false);
  ::ttnn::Tensor v200 = ttnn::to_layout(v199, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v199, false);
  ::ttnn::Tensor v201 = ttnn::to_device(v200, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v200, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v202 = ttnn::conv2d(v201, v111, v166, 16, 96, 1, 112, 112, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v203 = ::std::get<0>(v202);
  ttnn::deallocate(v201, false);
  ttnn::deallocate(v111, false);
  ::ttnn::Tensor v204 = ttnn::reshape(v203, ::std::vector<int32_t>{1, 112, 112, 96}, ::std::nullopt);
  ttnn::deallocate(v203, false);
  ::ttnn::Tensor v205 = ttnn::multiply(v204, v8, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v204, false);
  ttnn::deallocate(v8, false);
  ::ttnn::Tensor v206 = ttnn::add(v205, v9, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v205, false);
  ttnn::deallocate(v9, false);
  ::ttnn::Tensor v207 = ttnn::clamp(v206, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v206, false);
  ::ttnn::Tensor v208 = ttnn::reshape(v207, ::std::vector<int32_t>{1, 1, 12544, 96}, ::std::nullopt);
  ttnn::deallocate(v207, false);
  ::ttnn::Tensor v209 = ttnn::from_device(v208);
  ttnn::deallocate(v208, false);
  ::ttnn::Tensor v210 = ttnn::to_layout(v209, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v209, false);
  ::ttnn::Tensor v211 = ttnn::to_device(v210, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v210, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v212 = ttnn::conv2d(v211, v112, v166, 96, 96, 1, 112, 112, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{2, 2}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 96, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v213 = ::std::get<0>(v212);
  ttnn::deallocate(v211, false);
  ttnn::deallocate(v112, false);
  ::ttnn::Tensor v214 = ttnn::reshape(v213, ::std::vector<int32_t>{1, 56, 56, 96}, ::std::nullopt);
  ttnn::deallocate(v213, false);
  ::ttnn::Tensor v215 = ttnn::multiply(v214, v10, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v214, false);
  ttnn::deallocate(v10, false);
  ::ttnn::Tensor v216 = ttnn::add(v215, v11, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v215, false);
  ttnn::deallocate(v11, false);
  ::ttnn::Tensor v217 = ttnn::clamp(v216, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v216, false);
  ::ttnn::Tensor v218 = ttnn::reshape(v217, ::std::vector<int32_t>{1, 1, 3136, 96}, ::std::nullopt);
  ttnn::deallocate(v217, false);
  ::ttnn::Tensor v219 = ttnn::from_device(v218);
  ttnn::deallocate(v218, false);
  ::ttnn::Tensor v220 = ttnn::to_layout(v219, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v219, false);
  ::ttnn::Tensor v221 = ttnn::to_device(v220, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v220, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v222 = ttnn::conv2d(v221, v113, v166, 96, 24, 1, 56, 56, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v223 = ::std::get<0>(v222);
  ttnn::deallocate(v221, false);
  ttnn::deallocate(v113, false);
  ::ttnn::Tensor v224 = ttnn::reshape(v223, ::std::vector<int32_t>{1, 56, 56, 24}, ::std::nullopt);
  ttnn::deallocate(v223, false);
  ::ttnn::Tensor v225 = ttnn::multiply(v224, v12, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v224, false);
  ttnn::deallocate(v12, false);
  ::ttnn::Tensor v226 = ttnn::add(v225, v13, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v225, false);
  ttnn::deallocate(v13, false);
  ::ttnn::Tensor v227 = ttnn::reshape(v226, ::std::vector<int32_t>{1, 1, 3136, 24}, ::std::nullopt);
  ::ttnn::Tensor v228 = ttnn::from_device(v227);
  ttnn::deallocate(v227, false);
  ::ttnn::Tensor v229 = ttnn::to_layout(v228, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v228, false);
  ::ttnn::Tensor v230 = ttnn::to_device(v229, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v229, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v231 = ttnn::conv2d(v230, v114, v166, 24, 144, 1, 56, 56, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v232 = ::std::get<0>(v231);
  ttnn::deallocate(v230, false);
  ttnn::deallocate(v114, false);
  ::ttnn::Tensor v233 = ttnn::reshape(v232, ::std::vector<int32_t>{1, 56, 56, 144}, ::std::nullopt);
  ttnn::deallocate(v232, false);
  ::ttnn::Tensor v234 = ttnn::multiply(v233, v14, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v233, false);
  ttnn::deallocate(v14, false);
  ::ttnn::Tensor v235 = ttnn::add(v234, v15, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v234, false);
  ttnn::deallocate(v15, false);
  ::ttnn::Tensor v236 = ttnn::clamp(v235, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v235, false);
  ::ttnn::Tensor v237 = ttnn::reshape(v236, ::std::vector<int32_t>{1, 1, 3136, 144}, ::std::nullopt);
  ttnn::deallocate(v236, false);
  ::ttnn::Tensor v238 = ttnn::from_device(v237);
  ttnn::deallocate(v237, false);
  ::ttnn::Tensor v239 = ttnn::to_layout(v238, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v238, false);
  ::ttnn::Tensor v240 = ttnn::to_device(v239, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v239, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v241 = ttnn::conv2d(v240, v115, v166, 144, 144, 1, 56, 56, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 144, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v242 = ::std::get<0>(v241);
  ttnn::deallocate(v240, false);
  ttnn::deallocate(v115, false);
  ::ttnn::Tensor v243 = ttnn::reshape(v242, ::std::vector<int32_t>{1, 56, 56, 144}, ::std::nullopt);
  ttnn::deallocate(v242, false);
  ::ttnn::Tensor v244 = ttnn::multiply(v243, v16, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v243, false);
  ttnn::deallocate(v16, false);
  ::ttnn::Tensor v245 = ttnn::add(v244, v17, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v244, false);
  ttnn::deallocate(v17, false);
  ::ttnn::Tensor v246 = ttnn::clamp(v245, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v245, false);
  ::ttnn::Tensor v247 = ttnn::reshape(v246, ::std::vector<int32_t>{1, 1, 3136, 144}, ::std::nullopt);
  ttnn::deallocate(v246, false);
  ::ttnn::Tensor v248 = ttnn::from_device(v247);
  ttnn::deallocate(v247, false);
  ::ttnn::Tensor v249 = ttnn::to_layout(v248, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v248, false);
  ::ttnn::Tensor v250 = ttnn::to_device(v249, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v249, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v251 = ttnn::conv2d(v250, v116, v166, 144, 24, 1, 56, 56, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v252 = ::std::get<0>(v251);
  ttnn::deallocate(v250, false);
  ttnn::deallocate(v116, false);
  ::ttnn::Tensor v253 = ttnn::reshape(v252, ::std::vector<int32_t>{1, 56, 56, 24}, ::std::nullopt);
  ttnn::deallocate(v252, false);
  ::ttnn::Tensor v254 = ttnn::multiply(v253, v18, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v253, false);
  ttnn::deallocate(v18, false);
  ::ttnn::Tensor v255 = ttnn::add(v254, v19, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v254, false);
  ttnn::deallocate(v19, false);
  ::ttnn::Tensor v256 = ttnn::reshape(v226, ::std::vector<int32_t>{1, 1, 3136, 24}, ::std::nullopt);
  ttnn::deallocate(v226, false);
  ::ttnn::Tensor v257 = ttnn::reshape(v255, ::std::vector<int32_t>{1, 1, 3136, 24}, ::std::nullopt);
  ttnn::deallocate(v255, false);
  ::ttnn::Tensor v258 = ttnn::add(v256, v257, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v257, false);
  ttnn::deallocate(v256, false);
  ::ttnn::Tensor v259 = ttnn::from_device(v258);
  ttnn::deallocate(v258, false);
  ::ttnn::Tensor v260 = ttnn::to_layout(v259, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v259, false);
  ::ttnn::Tensor v261 = ttnn::to_device(v260, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v260, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v262 = ttnn::conv2d(v261, v117, v166, 24, 144, 1, 56, 56, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v263 = ::std::get<0>(v262);
  ttnn::deallocate(v261, false);
  ttnn::deallocate(v117, false);
  ::ttnn::Tensor v264 = ttnn::reshape(v263, ::std::vector<int32_t>{1, 56, 56, 144}, ::std::nullopt);
  ttnn::deallocate(v263, false);
  ::ttnn::Tensor v265 = ttnn::multiply(v264, v20, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v264, false);
  ttnn::deallocate(v20, false);
  ::ttnn::Tensor v266 = ttnn::add(v265, v21, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v265, false);
  ttnn::deallocate(v21, false);
  ::ttnn::Tensor v267 = ttnn::clamp(v266, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v266, false);
  ::ttnn::Tensor v268 = ttnn::reshape(v267, ::std::vector<int32_t>{1, 1, 3136, 144}, ::std::nullopt);
  ttnn::deallocate(v267, false);
  ::ttnn::Tensor v269 = ttnn::from_device(v268);
  ttnn::deallocate(v268, false);
  ::ttnn::Tensor v270 = ttnn::to_layout(v269, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v269, false);
  ::ttnn::Tensor v271 = ttnn::to_device(v270, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v270, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v272 = ttnn::conv2d(v271, v118, v166, 144, 144, 1, 56, 56, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{2, 2}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 144, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v273 = ::std::get<0>(v272);
  ttnn::deallocate(v271, false);
  ttnn::deallocate(v118, false);
  ::ttnn::Tensor v274 = ttnn::reshape(v273, ::std::vector<int32_t>{1, 28, 28, 144}, ::std::nullopt);
  ttnn::deallocate(v273, false);
  ::ttnn::Tensor v275 = ttnn::multiply(v274, v22, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v274, false);
  ttnn::deallocate(v22, false);
  ::ttnn::Tensor v276 = ttnn::add(v275, v23, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v275, false);
  ttnn::deallocate(v23, false);
  ::ttnn::Tensor v277 = ttnn::clamp(v276, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v276, false);
  ::ttnn::Tensor v278 = ttnn::reshape(v277, ::std::vector<int32_t>{1, 1, 784, 144}, ::std::nullopt);
  ttnn::deallocate(v277, false);
  ::ttnn::Tensor v279 = ttnn::from_device(v278);
  ttnn::deallocate(v278, false);
  ::ttnn::Tensor v280 = ttnn::to_layout(v279, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v279, false);
  ::ttnn::Tensor v281 = ttnn::to_device(v280, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v280, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v282 = ttnn::conv2d(v281, v119, v166, 144, 32, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v283 = ::std::get<0>(v282);
  ttnn::deallocate(v281, false);
  ttnn::deallocate(v119, false);
  ::ttnn::Tensor v284 = ttnn::reshape(v283, ::std::vector<int32_t>{1, 28, 28, 32}, ::std::nullopt);
  ttnn::deallocate(v283, false);
  ::ttnn::Tensor v285 = ttnn::multiply(v284, v24, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v284, false);
  ttnn::deallocate(v24, false);
  ::ttnn::Tensor v286 = ttnn::add(v285, v25, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v285, false);
  ttnn::deallocate(v25, false);
  ::ttnn::Tensor v287 = ttnn::reshape(v286, ::std::vector<int32_t>{1, 1, 784, 32}, ::std::nullopt);
  ::ttnn::Tensor v288 = ttnn::from_device(v287);
  ttnn::deallocate(v287, false);
  ::ttnn::Tensor v289 = ttnn::to_layout(v288, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v288, false);
  ::ttnn::Tensor v290 = ttnn::to_device(v289, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v289, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v291 = ttnn::conv2d(v290, v120, v166, 32, 1, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, v121, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v292 = ::std::get<0>(v291);
  ttnn::deallocate(v290, false);
  ttnn::deallocate(v121, false);
  ttnn::deallocate(v120, false);
  ::ttnn::Tensor v293 = ttnn::reshape(v292, ::std::vector<int32_t>{1, 28, 28, 1}, ::std::nullopt);
  ttnn::deallocate(v292, false);
  ::ttnn::Tensor v294 = ttnn::reshape(v286, ::std::vector<int32_t>{1, 1, 784, 32}, ::std::nullopt);
  ::ttnn::Tensor v295 = ttnn::from_device(v294);
  ttnn::deallocate(v294, false);
  ::ttnn::Tensor v296 = ttnn::to_layout(v295, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v295, false);
  ::ttnn::Tensor v297 = ttnn::to_device(v296, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v296, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v298 = ttnn::conv2d(v297, v122, v166, 32, 192, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v299 = ::std::get<0>(v298);
  ttnn::deallocate(v297, false);
  ttnn::deallocate(v122, false);
  ::ttnn::Tensor v300 = ttnn::reshape(v299, ::std::vector<int32_t>{1, 28, 28, 192}, ::std::nullopt);
  ttnn::deallocate(v299, false);
  ::ttnn::Tensor v301 = ttnn::multiply(v300, v26, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v300, false);
  ttnn::deallocate(v26, false);
  ::ttnn::Tensor v302 = ttnn::add(v301, v27, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v301, false);
  ttnn::deallocate(v27, false);
  ::ttnn::Tensor v303 = ttnn::clamp(v302, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v302, false);
  ::ttnn::Tensor v304 = ttnn::reshape(v303, ::std::vector<int32_t>{1, 1, 784, 192}, ::std::nullopt);
  ttnn::deallocate(v303, false);
  ::ttnn::Tensor v305 = ttnn::from_device(v304);
  ttnn::deallocate(v304, false);
  ::ttnn::Tensor v306 = ttnn::to_layout(v305, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v305, false);
  ::ttnn::Tensor v307 = ttnn::to_device(v306, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v306, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v308 = ttnn::conv2d(v307, v123, v166, 192, 192, 1, 28, 28, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 192, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v309 = ::std::get<0>(v308);
  ttnn::deallocate(v307, false);
  ttnn::deallocate(v123, false);
  ::ttnn::Tensor v310 = ttnn::reshape(v309, ::std::vector<int32_t>{1, 28, 28, 192}, ::std::nullopt);
  ttnn::deallocate(v309, false);
  ::ttnn::Tensor v311 = ttnn::multiply(v310, v28, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v310, false);
  ttnn::deallocate(v28, false);
  ::ttnn::Tensor v312 = ttnn::add(v311, v29, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v311, false);
  ttnn::deallocate(v29, false);
  ::ttnn::Tensor v313 = ttnn::clamp(v312, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v312, false);
  ::ttnn::Tensor v314 = ttnn::reshape(v313, ::std::vector<int32_t>{1, 1, 784, 192}, ::std::nullopt);
  ttnn::deallocate(v313, false);
  ::ttnn::Tensor v315 = ttnn::from_device(v314);
  ttnn::deallocate(v314, false);
  ::ttnn::Tensor v316 = ttnn::to_layout(v315, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v315, false);
  ::ttnn::Tensor v317 = ttnn::to_device(v316, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v316, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v318 = ttnn::conv2d(v317, v124, v166, 192, 32, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v319 = ::std::get<0>(v318);
  ttnn::deallocate(v317, false);
  ttnn::deallocate(v124, false);
  ::ttnn::Tensor v320 = ttnn::reshape(v319, ::std::vector<int32_t>{1, 28, 28, 32}, ::std::nullopt);
  ttnn::deallocate(v319, false);
  ::ttnn::Tensor v321 = ttnn::multiply(v320, v30, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v320, false);
  ttnn::deallocate(v30, false);
  ::ttnn::Tensor v322 = ttnn::add(v321, v31, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v321, false);
  ttnn::deallocate(v31, false);
  ::ttnn::Tensor v323 = ttnn::reshape(v286, ::std::vector<int32_t>{1, 1, 784, 32}, ::std::nullopt);
  ttnn::deallocate(v286, false);
  ::ttnn::Tensor v324 = ttnn::reshape(v322, ::std::vector<int32_t>{1, 1, 784, 32}, ::std::nullopt);
  ttnn::deallocate(v322, false);
  ::ttnn::Tensor v325 = ttnn::add(v323, v324, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v324, false);
  ttnn::deallocate(v323, false);
  ::ttnn::Tensor v326 = ttnn::from_device(v325);
  ::ttnn::Tensor v327 = ttnn::to_layout(v326, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v326, false);
  ::ttnn::Tensor v328 = ttnn::to_device(v327, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v327, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v329 = ttnn::conv2d(v328, v125, v166, 32, 192, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v330 = ::std::get<0>(v329);
  ttnn::deallocate(v328, false);
  ttnn::deallocate(v125, false);
  ::ttnn::Tensor v331 = ttnn::reshape(v330, ::std::vector<int32_t>{1, 28, 28, 192}, ::std::nullopt);
  ttnn::deallocate(v330, false);
  ::ttnn::Tensor v332 = ttnn::multiply(v331, v32, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v331, false);
  ttnn::deallocate(v32, false);
  ::ttnn::Tensor v333 = ttnn::add(v332, v33, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v332, false);
  ttnn::deallocate(v33, false);
  ::ttnn::Tensor v334 = ttnn::clamp(v333, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v333, false);
  ::ttnn::Tensor v335 = ttnn::reshape(v334, ::std::vector<int32_t>{1, 1, 784, 192}, ::std::nullopt);
  ttnn::deallocate(v334, false);
  ::ttnn::Tensor v336 = ttnn::from_device(v335);
  ttnn::deallocate(v335, false);
  ::ttnn::Tensor v337 = ttnn::to_layout(v336, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v336, false);
  ::ttnn::Tensor v338 = ttnn::to_device(v337, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v337, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v339 = ttnn::conv2d(v338, v126, v166, 192, 192, 1, 28, 28, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 192, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v340 = ::std::get<0>(v339);
  ttnn::deallocate(v338, false);
  ttnn::deallocate(v126, false);
  ::ttnn::Tensor v341 = ttnn::reshape(v340, ::std::vector<int32_t>{1, 28, 28, 192}, ::std::nullopt);
  ttnn::deallocate(v340, false);
  ::ttnn::Tensor v342 = ttnn::multiply(v341, v34, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v341, false);
  ttnn::deallocate(v34, false);
  ::ttnn::Tensor v343 = ttnn::add(v342, v35, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v342, false);
  ttnn::deallocate(v35, false);
  ::ttnn::Tensor v344 = ttnn::clamp(v343, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v343, false);
  ::ttnn::Tensor v345 = ttnn::reshape(v344, ::std::vector<int32_t>{1, 1, 784, 192}, ::std::nullopt);
  ttnn::deallocate(v344, false);
  ::ttnn::Tensor v346 = ttnn::from_device(v345);
  ttnn::deallocate(v345, false);
  ::ttnn::Tensor v347 = ttnn::to_layout(v346, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v346, false);
  ::ttnn::Tensor v348 = ttnn::to_device(v347, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v347, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v349 = ttnn::conv2d(v348, v127, v166, 192, 32, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v350 = ::std::get<0>(v349);
  ttnn::deallocate(v348, false);
  ttnn::deallocate(v127, false);
  ::ttnn::Tensor v351 = ttnn::reshape(v350, ::std::vector<int32_t>{1, 28, 28, 32}, ::std::nullopt);
  ttnn::deallocate(v350, false);
  ::ttnn::Tensor v352 = ttnn::multiply(v351, v36, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v351, false);
  ttnn::deallocate(v36, false);
  ::ttnn::Tensor v353 = ttnn::add(v352, v37, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v352, false);
  ttnn::deallocate(v37, false);
  ::ttnn::Tensor v354 = ttnn::reshape(v353, ::std::vector<int32_t>{1, 1, 784, 32}, ::std::nullopt);
  ttnn::deallocate(v353, false);
  ::ttnn::Tensor v355 = ttnn::add(v325, v354, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v354, false);
  ttnn::deallocate(v325, false);
  ::ttnn::Tensor v356 = ttnn::from_device(v355);
  ttnn::deallocate(v355, false);
  ::ttnn::Tensor v357 = ttnn::to_layout(v356, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v356, false);
  ::ttnn::Tensor v358 = ttnn::to_device(v357, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v357, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v359 = ttnn::conv2d(v358, v128, v166, 32, 192, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v360 = ::std::get<0>(v359);
  ttnn::deallocate(v358, false);
  ttnn::deallocate(v128, false);
  ::ttnn::Tensor v361 = ttnn::reshape(v360, ::std::vector<int32_t>{1, 28, 28, 192}, ::std::nullopt);
  ttnn::deallocate(v360, false);
  ::ttnn::Tensor v362 = ttnn::multiply(v361, v38, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v361, false);
  ttnn::deallocate(v38, false);
  ::ttnn::Tensor v363 = ttnn::add(v362, v39, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v362, false);
  ttnn::deallocate(v39, false);
  ::ttnn::Tensor v364 = ttnn::clamp(v363, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v363, false);
  ::ttnn::Tensor v365 = ttnn::reshape(v364, ::std::vector<int32_t>{1, 1, 784, 192}, ::std::nullopt);
  ttnn::deallocate(v364, false);
  ::ttnn::Tensor v366 = ttnn::from_device(v365);
  ttnn::deallocate(v365, false);
  ::ttnn::Tensor v367 = ttnn::to_layout(v366, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v366, false);
  ::ttnn::Tensor v368 = ttnn::to_device(v367, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v367, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v369 = ttnn::conv2d(v368, v129, v166, 192, 192, 1, 28, 28, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{2, 2}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 192, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v370 = ::std::get<0>(v369);
  ttnn::deallocate(v368, false);
  ttnn::deallocate(v129, false);
  ::ttnn::Tensor v371 = ttnn::reshape(v370, ::std::vector<int32_t>{1, 14, 14, 192}, ::std::nullopt);
  ttnn::deallocate(v370, false);
  ::ttnn::Tensor v372 = ttnn::multiply(v371, v40, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v371, false);
  ttnn::deallocate(v40, false);
  ::ttnn::Tensor v373 = ttnn::add(v372, v41, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v372, false);
  ttnn::deallocate(v41, false);
  ::ttnn::Tensor v374 = ttnn::clamp(v373, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v373, false);
  ::ttnn::Tensor v375 = ttnn::reshape(v374, ::std::vector<int32_t>{1, 1, 196, 192}, ::std::nullopt);
  ttnn::deallocate(v374, false);
  ::ttnn::Tensor v376 = ttnn::from_device(v375);
  ttnn::deallocate(v375, false);
  ::ttnn::Tensor v377 = ttnn::to_layout(v376, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v376, false);
  ::ttnn::Tensor v378 = ttnn::to_device(v377, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v377, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v379 = ttnn::conv2d(v378, v130, v166, 192, 64, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v380 = ::std::get<0>(v379);
  ttnn::deallocate(v378, false);
  ttnn::deallocate(v130, false);
  ::ttnn::Tensor v381 = ttnn::reshape(v380, ::std::vector<int32_t>{1, 14, 14, 64}, ::std::nullopt);
  ttnn::deallocate(v380, false);
  ::ttnn::Tensor v382 = ttnn::multiply(v381, v42, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v381, false);
  ttnn::deallocate(v42, false);
  ::ttnn::Tensor v383 = ttnn::add(v382, v43, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v382, false);
  ttnn::deallocate(v43, false);
  ::ttnn::Tensor v384 = ttnn::reshape(v383, ::std::vector<int32_t>{1, 1, 196, 64}, ::std::nullopt);
  ::ttnn::Tensor v385 = ttnn::from_device(v384);
  ttnn::deallocate(v384, false);
  ::ttnn::Tensor v386 = ttnn::to_layout(v385, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v385, false);
  ::ttnn::Tensor v387 = ttnn::to_device(v386, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v386, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v388 = ttnn::conv2d(v387, v131, v166, 64, 384, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v389 = ::std::get<0>(v388);
  ttnn::deallocate(v387, false);
  ttnn::deallocate(v131, false);
  ::ttnn::Tensor v390 = ttnn::reshape(v389, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v389, false);
  ::ttnn::Tensor v391 = ttnn::multiply(v390, v44, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v390, false);
  ttnn::deallocate(v44, false);
  ::ttnn::Tensor v392 = ttnn::add(v391, v45, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v391, false);
  ttnn::deallocate(v45, false);
  ::ttnn::Tensor v393 = ttnn::clamp(v392, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v392, false);
  ::ttnn::Tensor v394 = ttnn::reshape(v393, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v393, false);
  ::ttnn::Tensor v395 = ttnn::from_device(v394);
  ttnn::deallocate(v394, false);
  ::ttnn::Tensor v396 = ttnn::to_layout(v395, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v395, false);
  ::ttnn::Tensor v397 = ttnn::to_device(v396, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v396, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v398 = ttnn::conv2d(v397, v132, v166, 384, 384, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 384, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v399 = ::std::get<0>(v398);
  ttnn::deallocate(v397, false);
  ttnn::deallocate(v132, false);
  ::ttnn::Tensor v400 = ttnn::reshape(v399, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v399, false);
  ::ttnn::Tensor v401 = ttnn::multiply(v400, v46, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v400, false);
  ttnn::deallocate(v46, false);
  ::ttnn::Tensor v402 = ttnn::add(v401, v47, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v401, false);
  ttnn::deallocate(v47, false);
  ::ttnn::Tensor v403 = ttnn::clamp(v402, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v402, false);
  ::ttnn::Tensor v404 = ttnn::reshape(v403, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v403, false);
  ::ttnn::Tensor v405 = ttnn::from_device(v404);
  ttnn::deallocate(v404, false);
  ::ttnn::Tensor v406 = ttnn::to_layout(v405, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v405, false);
  ::ttnn::Tensor v407 = ttnn::to_device(v406, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v406, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v408 = ttnn::conv2d(v407, v133, v166, 384, 64, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v409 = ::std::get<0>(v408);
  ttnn::deallocate(v407, false);
  ttnn::deallocate(v133, false);
  ::ttnn::Tensor v410 = ttnn::reshape(v409, ::std::vector<int32_t>{1, 14, 14, 64}, ::std::nullopt);
  ttnn::deallocate(v409, false);
  ::ttnn::Tensor v411 = ttnn::multiply(v410, v48, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v410, false);
  ttnn::deallocate(v48, false);
  ::ttnn::Tensor v412 = ttnn::add(v411, v49, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v411, false);
  ttnn::deallocate(v49, false);
  ::ttnn::Tensor v413 = ttnn::reshape(v383, ::std::vector<int32_t>{1, 1, 196, 64}, ::std::nullopt);
  ttnn::deallocate(v383, false);
  ::ttnn::Tensor v414 = ttnn::reshape(v412, ::std::vector<int32_t>{1, 1, 196, 64}, ::std::nullopt);
  ttnn::deallocate(v412, false);
  ::ttnn::Tensor v415 = ttnn::add(v413, v414, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v414, false);
  ttnn::deallocate(v413, false);
  ::ttnn::Tensor v416 = ttnn::from_device(v415);
  ::ttnn::Tensor v417 = ttnn::to_layout(v416, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v416, false);
  ::ttnn::Tensor v418 = ttnn::to_device(v417, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v417, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v419 = ttnn::conv2d(v418, v134, v166, 64, 384, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v420 = ::std::get<0>(v419);
  ttnn::deallocate(v418, false);
  ttnn::deallocate(v134, false);
  ::ttnn::Tensor v421 = ttnn::reshape(v420, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v420, false);
  ::ttnn::Tensor v422 = ttnn::multiply(v421, v50, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v421, false);
  ttnn::deallocate(v50, false);
  ::ttnn::Tensor v423 = ttnn::add(v422, v51, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v422, false);
  ttnn::deallocate(v51, false);
  ::ttnn::Tensor v424 = ttnn::clamp(v423, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v423, false);
  ::ttnn::Tensor v425 = ttnn::reshape(v424, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v424, false);
  ::ttnn::Tensor v426 = ttnn::from_device(v425);
  ttnn::deallocate(v425, false);
  ::ttnn::Tensor v427 = ttnn::to_layout(v426, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v426, false);
  ::ttnn::Tensor v428 = ttnn::to_device(v427, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v427, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v429 = ttnn::conv2d(v428, v135, v166, 384, 384, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 384, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v430 = ::std::get<0>(v429);
  ttnn::deallocate(v428, false);
  ttnn::deallocate(v135, false);
  ::ttnn::Tensor v431 = ttnn::reshape(v430, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v430, false);
  ::ttnn::Tensor v432 = ttnn::multiply(v431, v52, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v431, false);
  ttnn::deallocate(v52, false);
  ::ttnn::Tensor v433 = ttnn::add(v432, v53, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v432, false);
  ttnn::deallocate(v53, false);
  ::ttnn::Tensor v434 = ttnn::clamp(v433, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v433, false);
  ::ttnn::Tensor v435 = ttnn::reshape(v434, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v434, false);
  ::ttnn::Tensor v436 = ttnn::from_device(v435);
  ttnn::deallocate(v435, false);
  ::ttnn::Tensor v437 = ttnn::to_layout(v436, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v436, false);
  ::ttnn::Tensor v438 = ttnn::to_device(v437, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v437, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v439 = ttnn::conv2d(v438, v136, v166, 384, 64, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v440 = ::std::get<0>(v439);
  ttnn::deallocate(v438, false);
  ttnn::deallocate(v136, false);
  ::ttnn::Tensor v441 = ttnn::reshape(v440, ::std::vector<int32_t>{1, 14, 14, 64}, ::std::nullopt);
  ttnn::deallocate(v440, false);
  ::ttnn::Tensor v442 = ttnn::multiply(v441, v54, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v441, false);
  ttnn::deallocate(v54, false);
  ::ttnn::Tensor v443 = ttnn::add(v442, v55, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v442, false);
  ttnn::deallocate(v55, false);
  ::ttnn::Tensor v444 = ttnn::reshape(v443, ::std::vector<int32_t>{1, 1, 196, 64}, ::std::nullopt);
  ttnn::deallocate(v443, false);
  ::ttnn::Tensor v445 = ttnn::add(v415, v444, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v444, false);
  ttnn::deallocate(v415, false);
  ::ttnn::Tensor v446 = ttnn::from_device(v445);
  ::ttnn::Tensor v447 = ttnn::to_layout(v446, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v446, false);
  ::ttnn::Tensor v448 = ttnn::to_device(v447, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v447, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v449 = ttnn::conv2d(v448, v137, v166, 64, 384, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v450 = ::std::get<0>(v449);
  ttnn::deallocate(v448, false);
  ttnn::deallocate(v137, false);
  ::ttnn::Tensor v451 = ttnn::reshape(v450, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v450, false);
  ::ttnn::Tensor v452 = ttnn::multiply(v451, v56, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v451, false);
  ttnn::deallocate(v56, false);
  ::ttnn::Tensor v453 = ttnn::add(v452, v57, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v452, false);
  ttnn::deallocate(v57, false);
  ::ttnn::Tensor v454 = ttnn::clamp(v453, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v453, false);
  ::ttnn::Tensor v455 = ttnn::reshape(v454, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v454, false);
  ::ttnn::Tensor v456 = ttnn::from_device(v455);
  ttnn::deallocate(v455, false);
  ::ttnn::Tensor v457 = ttnn::to_layout(v456, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v456, false);
  ::ttnn::Tensor v458 = ttnn::to_device(v457, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v457, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v459 = ttnn::conv2d(v458, v138, v166, 384, 384, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 384, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v460 = ::std::get<0>(v459);
  ttnn::deallocate(v458, false);
  ttnn::deallocate(v138, false);
  ::ttnn::Tensor v461 = ttnn::reshape(v460, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v460, false);
  ::ttnn::Tensor v462 = ttnn::multiply(v461, v58, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v461, false);
  ttnn::deallocate(v58, false);
  ::ttnn::Tensor v463 = ttnn::add(v462, v59, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v462, false);
  ttnn::deallocate(v59, false);
  ::ttnn::Tensor v464 = ttnn::clamp(v463, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v463, false);
  ::ttnn::Tensor v465 = ttnn::reshape(v464, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v464, false);
  ::ttnn::Tensor v466 = ttnn::from_device(v465);
  ttnn::deallocate(v465, false);
  ::ttnn::Tensor v467 = ttnn::to_layout(v466, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v466, false);
  ::ttnn::Tensor v468 = ttnn::to_device(v467, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v467, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v469 = ttnn::conv2d(v468, v139, v166, 384, 64, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v470 = ::std::get<0>(v469);
  ttnn::deallocate(v468, false);
  ttnn::deallocate(v139, false);
  ::ttnn::Tensor v471 = ttnn::reshape(v470, ::std::vector<int32_t>{1, 14, 14, 64}, ::std::nullopt);
  ttnn::deallocate(v470, false);
  ::ttnn::Tensor v472 = ttnn::multiply(v471, v60, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v471, false);
  ttnn::deallocate(v60, false);
  ::ttnn::Tensor v473 = ttnn::add(v472, v61, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v472, false);
  ttnn::deallocate(v61, false);
  ::ttnn::Tensor v474 = ttnn::reshape(v473, ::std::vector<int32_t>{1, 1, 196, 64}, ::std::nullopt);
  ttnn::deallocate(v473, false);
  ::ttnn::Tensor v475 = ttnn::add(v445, v474, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v474, false);
  ttnn::deallocate(v445, false);
  ::ttnn::Tensor v476 = ttnn::from_device(v475);
  ttnn::deallocate(v475, false);
  ::ttnn::Tensor v477 = ttnn::to_layout(v476, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v476, false);
  ::ttnn::Tensor v478 = ttnn::to_device(v477, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v477, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v479 = ttnn::conv2d(v478, v140, v166, 64, 384, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v480 = ::std::get<0>(v479);
  ttnn::deallocate(v478, false);
  ttnn::deallocate(v140, false);
  ::ttnn::Tensor v481 = ttnn::reshape(v480, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v480, false);
  ::ttnn::Tensor v482 = ttnn::multiply(v481, v62, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v481, false);
  ttnn::deallocate(v62, false);
  ::ttnn::Tensor v483 = ttnn::add(v482, v63, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v482, false);
  ttnn::deallocate(v63, false);
  ::ttnn::Tensor v484 = ttnn::clamp(v483, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v483, false);
  ::ttnn::Tensor v485 = ttnn::reshape(v484, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v484, false);
  ::ttnn::Tensor v486 = ttnn::from_device(v485);
  ttnn::deallocate(v485, false);
  ::ttnn::Tensor v487 = ttnn::to_layout(v486, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v486, false);
  ::ttnn::Tensor v488 = ttnn::to_device(v487, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v487, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v489 = ttnn::conv2d(v488, v141, v166, 384, 384, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 384, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v490 = ::std::get<0>(v489);
  ttnn::deallocate(v488, false);
  ttnn::deallocate(v141, false);
  ::ttnn::Tensor v491 = ttnn::reshape(v490, ::std::vector<int32_t>{1, 14, 14, 384}, ::std::nullopt);
  ttnn::deallocate(v490, false);
  ::ttnn::Tensor v492 = ttnn::multiply(v491, v64, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v491, false);
  ttnn::deallocate(v64, false);
  ::ttnn::Tensor v493 = ttnn::add(v492, v65, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v492, false);
  ttnn::deallocate(v65, false);
  ::ttnn::Tensor v494 = ttnn::clamp(v493, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v493, false);
  ::ttnn::Tensor v495 = ttnn::reshape(v494, ::std::vector<int32_t>{1, 1, 196, 384}, ::std::nullopt);
  ttnn::deallocate(v494, false);
  ::ttnn::Tensor v496 = ttnn::from_device(v495);
  ttnn::deallocate(v495, false);
  ::ttnn::Tensor v497 = ttnn::to_layout(v496, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v496, false);
  ::ttnn::Tensor v498 = ttnn::to_device(v497, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v497, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v499 = ttnn::conv2d(v498, v142, v166, 384, 96, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v500 = ::std::get<0>(v499);
  ttnn::deallocate(v498, false);
  ttnn::deallocate(v142, false);
  ::ttnn::Tensor v501 = ttnn::reshape(v500, ::std::vector<int32_t>{1, 14, 14, 96}, ::std::nullopt);
  ttnn::deallocate(v500, false);
  ::ttnn::Tensor v502 = ttnn::multiply(v501, v66, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v501, false);
  ttnn::deallocate(v66, false);
  ::ttnn::Tensor v503 = ttnn::add(v502, v67, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v502, false);
  ttnn::deallocate(v67, false);
  ::ttnn::Tensor v504 = ttnn::reshape(v503, ::std::vector<int32_t>{1, 1, 196, 96}, ::std::nullopt);
  ::ttnn::Tensor v505 = ttnn::from_device(v504);
  ttnn::deallocate(v504, false);
  ::ttnn::Tensor v506 = ttnn::to_layout(v505, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v505, false);
  ::ttnn::Tensor v507 = ttnn::to_device(v506, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v506, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v508 = ttnn::conv2d(v507, v143, v166, 96, 576, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v509 = ::std::get<0>(v508);
  ttnn::deallocate(v507, false);
  ttnn::deallocate(v143, false);
  ::ttnn::Tensor v510 = ttnn::reshape(v509, ::std::vector<int32_t>{1, 14, 14, 576}, ::std::nullopt);
  ttnn::deallocate(v509, false);
  ::ttnn::Tensor v511 = ttnn::multiply(v510, v68, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v510, false);
  ttnn::deallocate(v68, false);
  ::ttnn::Tensor v512 = ttnn::add(v511, v69, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v511, false);
  ttnn::deallocate(v69, false);
  ::ttnn::Tensor v513 = ttnn::clamp(v512, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v512, false);
  ::ttnn::Tensor v514 = ttnn::reshape(v513, ::std::vector<int32_t>{1, 1, 196, 576}, ::std::nullopt);
  ttnn::deallocate(v513, false);
  ::ttnn::Tensor v515 = ttnn::from_device(v514);
  ttnn::deallocate(v514, false);
  ::ttnn::Tensor v516 = ttnn::to_layout(v515, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v515, false);
  ::ttnn::Tensor v517 = ttnn::to_device(v516, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v516, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v518 = ttnn::conv2d(v517, v144, v166, 576, 576, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 576, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v519 = ::std::get<0>(v518);
  ttnn::deallocate(v517, false);
  ttnn::deallocate(v144, false);
  ::ttnn::Tensor v520 = ttnn::reshape(v519, ::std::vector<int32_t>{1, 14, 14, 576}, ::std::nullopt);
  ttnn::deallocate(v519, false);
  ::ttnn::Tensor v521 = ttnn::multiply(v520, v70, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v520, false);
  ttnn::deallocate(v70, false);
  ::ttnn::Tensor v522 = ttnn::add(v521, v71, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v521, false);
  ttnn::deallocate(v71, false);
  ::ttnn::Tensor v523 = ttnn::clamp(v522, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v522, false);
  ::ttnn::Tensor v524 = ttnn::reshape(v523, ::std::vector<int32_t>{1, 1, 196, 576}, ::std::nullopt);
  ttnn::deallocate(v523, false);
  ::ttnn::Tensor v525 = ttnn::from_device(v524);
  ttnn::deallocate(v524, false);
  ::ttnn::Tensor v526 = ttnn::to_layout(v525, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v525, false);
  ::ttnn::Tensor v527 = ttnn::to_device(v526, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v526, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v528 = ttnn::conv2d(v527, v145, v166, 576, 96, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v529 = ::std::get<0>(v528);
  ttnn::deallocate(v527, false);
  ttnn::deallocate(v145, false);
  ::ttnn::Tensor v530 = ttnn::reshape(v529, ::std::vector<int32_t>{1, 14, 14, 96}, ::std::nullopt);
  ttnn::deallocate(v529, false);
  ::ttnn::Tensor v531 = ttnn::multiply(v530, v72, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v530, false);
  ttnn::deallocate(v72, false);
  ::ttnn::Tensor v532 = ttnn::add(v531, v73, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v531, false);
  ttnn::deallocate(v73, false);
  ::ttnn::Tensor v533 = ttnn::reshape(v503, ::std::vector<int32_t>{1, 1, 196, 96}, ::std::nullopt);
  ttnn::deallocate(v503, false);
  ::ttnn::Tensor v534 = ttnn::reshape(v532, ::std::vector<int32_t>{1, 1, 196, 96}, ::std::nullopt);
  ttnn::deallocate(v532, false);
  ::ttnn::Tensor v535 = ttnn::add(v533, v534, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v534, false);
  ttnn::deallocate(v533, false);
  ::ttnn::Tensor v536 = ttnn::from_device(v535);
  ::ttnn::Tensor v537 = ttnn::to_layout(v536, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v536, false);
  ::ttnn::Tensor v538 = ttnn::to_device(v537, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v537, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v539 = ttnn::conv2d(v538, v146, v166, 96, 576, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v540 = ::std::get<0>(v539);
  ttnn::deallocate(v538, false);
  ttnn::deallocate(v146, false);
  ::ttnn::Tensor v541 = ttnn::reshape(v540, ::std::vector<int32_t>{1, 14, 14, 576}, ::std::nullopt);
  ttnn::deallocate(v540, false);
  ::ttnn::Tensor v542 = ttnn::multiply(v541, v74, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v541, false);
  ttnn::deallocate(v74, false);
  ::ttnn::Tensor v543 = ttnn::add(v542, v75, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v542, false);
  ttnn::deallocate(v75, false);
  ::ttnn::Tensor v544 = ttnn::clamp(v543, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v543, false);
  ::ttnn::Tensor v545 = ttnn::reshape(v544, ::std::vector<int32_t>{1, 1, 196, 576}, ::std::nullopt);
  ttnn::deallocate(v544, false);
  ::ttnn::Tensor v546 = ttnn::from_device(v545);
  ttnn::deallocate(v545, false);
  ::ttnn::Tensor v547 = ttnn::to_layout(v546, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v546, false);
  ::ttnn::Tensor v548 = ttnn::to_device(v547, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v547, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v549 = ttnn::conv2d(v548, v147, v166, 576, 576, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 576, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v550 = ::std::get<0>(v549);
  ttnn::deallocate(v548, false);
  ttnn::deallocate(v147, false);
  ::ttnn::Tensor v551 = ttnn::reshape(v550, ::std::vector<int32_t>{1, 14, 14, 576}, ::std::nullopt);
  ttnn::deallocate(v550, false);
  ::ttnn::Tensor v552 = ttnn::multiply(v551, v76, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v551, false);
  ttnn::deallocate(v76, false);
  ::ttnn::Tensor v553 = ttnn::add(v552, v77, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v552, false);
  ttnn::deallocate(v77, false);
  ::ttnn::Tensor v554 = ttnn::clamp(v553, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v553, false);
  ::ttnn::Tensor v555 = ttnn::reshape(v554, ::std::vector<int32_t>{1, 1, 196, 576}, ::std::nullopt);
  ttnn::deallocate(v554, false);
  ::ttnn::Tensor v556 = ttnn::from_device(v555);
  ttnn::deallocate(v555, false);
  ::ttnn::Tensor v557 = ttnn::to_layout(v556, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v556, false);
  ::ttnn::Tensor v558 = ttnn::to_device(v557, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v557, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v559 = ttnn::conv2d(v558, v148, v166, 576, 96, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v560 = ::std::get<0>(v559);
  ttnn::deallocate(v558, false);
  ttnn::deallocate(v148, false);
  ::ttnn::Tensor v561 = ttnn::reshape(v560, ::std::vector<int32_t>{1, 14, 14, 96}, ::std::nullopt);
  ttnn::deallocate(v560, false);
  ::ttnn::Tensor v562 = ttnn::multiply(v561, v78, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v561, false);
  ttnn::deallocate(v78, false);
  ::ttnn::Tensor v563 = ttnn::add(v562, v79, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v562, false);
  ttnn::deallocate(v79, false);
  ::ttnn::Tensor v564 = ttnn::reshape(v563, ::std::vector<int32_t>{1, 1, 196, 96}, ::std::nullopt);
  ttnn::deallocate(v563, false);
  ::ttnn::Tensor v565 = ttnn::add(v535, v564, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v564, false);
  ttnn::deallocate(v535, false);
  ::ttnn::Tensor v566 = ttnn::from_device(v565);
  ttnn::deallocate(v565, false);
  ::ttnn::Tensor v567 = ttnn::to_layout(v566, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v566, false);
  ::ttnn::Tensor v568 = ttnn::to_device(v567, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v567, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v569 = ttnn::conv2d(v568, v149, v166, 96, 576, 1, 14, 14, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v570 = ::std::get<0>(v569);
  ttnn::deallocate(v568, false);
  ttnn::deallocate(v149, false);
  ::ttnn::Tensor v571 = ttnn::reshape(v570, ::std::vector<int32_t>{1, 14, 14, 576}, ::std::nullopt);
  ttnn::deallocate(v570, false);
  ::ttnn::Tensor v572 = ttnn::multiply(v571, v80, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v571, false);
  ttnn::deallocate(v80, false);
  ::ttnn::Tensor v573 = ttnn::add(v572, v81, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v572, false);
  ttnn::deallocate(v81, false);
  ::ttnn::Tensor v574 = ttnn::clamp(v573, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v573, false);
  ::ttnn::Tensor v575 = ttnn::reshape(v574, ::std::vector<int32_t>{1, 1, 196, 576}, ::std::nullopt);
  ttnn::deallocate(v574, false);
  ::ttnn::Tensor v576 = ttnn::from_device(v575);
  ttnn::deallocate(v575, false);
  ::ttnn::Tensor v577 = ttnn::to_layout(v576, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v576, false);
  ::ttnn::Tensor v578 = ttnn::to_device(v577, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v577, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v579 = ttnn::conv2d(v578, v150, v166, 576, 576, 1, 14, 14, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{2, 2}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 576, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v580 = ::std::get<0>(v579);
  ttnn::deallocate(v578, false);
  ttnn::deallocate(v150, false);
  ::ttnn::Tensor v581 = ttnn::reshape(v580, ::std::vector<int32_t>{1, 7, 7, 576}, ::std::nullopt);
  ttnn::deallocate(v580, false);
  ::ttnn::Tensor v582 = ttnn::multiply(v581, v82, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v581, false);
  ttnn::deallocate(v82, false);
  ::ttnn::Tensor v583 = ttnn::add(v582, v83, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v582, false);
  ttnn::deallocate(v83, false);
  ::ttnn::Tensor v584 = ttnn::clamp(v583, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v583, false);
  ::ttnn::Tensor v585 = ttnn::reshape(v584, ::std::vector<int32_t>{1, 1, 49, 576}, ::std::nullopt);
  ttnn::deallocate(v584, false);
  ::ttnn::Tensor v586 = ttnn::from_device(v585);
  ttnn::deallocate(v585, false);
  ::ttnn::Tensor v587 = ttnn::to_layout(v586, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v586, false);
  ::ttnn::Tensor v588 = ttnn::to_device(v587, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v587, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v589 = ttnn::conv2d(v588, v151, v166, 576, 160, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v590 = ::std::get<0>(v589);
  ttnn::deallocate(v588, false);
  ttnn::deallocate(v151, false);
  ::ttnn::Tensor v591 = ttnn::reshape(v590, ::std::vector<int32_t>{1, 7, 7, 160}, ::std::nullopt);
  ttnn::deallocate(v590, false);
  ::ttnn::Tensor v592 = ttnn::multiply(v591, v84, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v591, false);
  ttnn::deallocate(v84, false);
  ::ttnn::Tensor v593 = ttnn::add(v592, v85, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v592, false);
  ttnn::deallocate(v85, false);
  ::ttnn::Tensor v594 = ttnn::reshape(v593, ::std::vector<int32_t>{1, 1, 49, 160}, ::std::nullopt);
  ::ttnn::Tensor v595 = ttnn::from_device(v594);
  ttnn::deallocate(v594, false);
  ::ttnn::Tensor v596 = ttnn::to_layout(v595, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v595, false);
  ::ttnn::Tensor v597 = ttnn::to_device(v596, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v596, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v598 = ttnn::conv2d(v597, v152, v166, 160, 960, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v599 = ::std::get<0>(v598);
  ttnn::deallocate(v597, false);
  ttnn::deallocate(v152, false);
  ::ttnn::Tensor v600 = ttnn::reshape(v599, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v599, false);
  ::ttnn::Tensor v601 = ttnn::multiply(v600, v86, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v600, false);
  ttnn::deallocate(v86, false);
  ::ttnn::Tensor v602 = ttnn::add(v601, v87, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v601, false);
  ttnn::deallocate(v87, false);
  ::ttnn::Tensor v603 = ttnn::clamp(v602, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v602, false);
  ::ttnn::Tensor v604 = ttnn::reshape(v603, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v603, false);
  ::ttnn::Tensor v605 = ttnn::from_device(v604);
  ttnn::deallocate(v604, false);
  ::ttnn::Tensor v606 = ttnn::to_layout(v605, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v605, false);
  ::ttnn::Tensor v607 = ttnn::to_device(v606, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v606, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v608 = ttnn::conv2d(v607, v153, v166, 960, 960, 1, 7, 7, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 960, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v609 = ::std::get<0>(v608);
  ttnn::deallocate(v607, false);
  ttnn::deallocate(v153, false);
  ::ttnn::Tensor v610 = ttnn::reshape(v609, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v609, false);
  ::ttnn::Tensor v611 = ttnn::multiply(v610, v88, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v610, false);
  ttnn::deallocate(v88, false);
  ::ttnn::Tensor v612 = ttnn::add(v611, v89, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v611, false);
  ttnn::deallocate(v89, false);
  ::ttnn::Tensor v613 = ttnn::clamp(v612, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v612, false);
  ::ttnn::Tensor v614 = ttnn::reshape(v613, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v613, false);
  ::ttnn::Tensor v615 = ttnn::from_device(v614);
  ttnn::deallocate(v614, false);
  ::ttnn::Tensor v616 = ttnn::to_layout(v615, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v615, false);
  ::ttnn::Tensor v617 = ttnn::to_device(v616, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v616, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v618 = ttnn::conv2d(v617, v154, v166, 960, 160, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v619 = ::std::get<0>(v618);
  ttnn::deallocate(v617, false);
  ttnn::deallocate(v154, false);
  ::ttnn::Tensor v620 = ttnn::reshape(v619, ::std::vector<int32_t>{1, 7, 7, 160}, ::std::nullopt);
  ttnn::deallocate(v619, false);
  ::ttnn::Tensor v621 = ttnn::multiply(v620, v90, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v620, false);
  ttnn::deallocate(v90, false);
  ::ttnn::Tensor v622 = ttnn::add(v621, v91, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v621, false);
  ttnn::deallocate(v91, false);
  ::ttnn::Tensor v623 = ttnn::reshape(v593, ::std::vector<int32_t>{1, 1, 49, 160}, ::std::nullopt);
  ttnn::deallocate(v593, false);
  ::ttnn::Tensor v624 = ttnn::reshape(v622, ::std::vector<int32_t>{1, 1, 49, 160}, ::std::nullopt);
  ttnn::deallocate(v622, false);
  ::ttnn::Tensor v625 = ttnn::add(v623, v624, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v624, false);
  ttnn::deallocate(v623, false);
  ::ttnn::Tensor v626 = ttnn::from_device(v625);
  ::ttnn::Tensor v627 = ttnn::to_layout(v626, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v626, false);
  ::ttnn::Tensor v628 = ttnn::to_device(v627, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v627, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v629 = ttnn::conv2d(v628, v155, v166, 160, 960, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v630 = ::std::get<0>(v629);
  ttnn::deallocate(v628, false);
  ttnn::deallocate(v155, false);
  ::ttnn::Tensor v631 = ttnn::reshape(v630, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v630, false);
  ::ttnn::Tensor v632 = ttnn::multiply(v631, v92, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v631, false);
  ttnn::deallocate(v92, false);
  ::ttnn::Tensor v633 = ttnn::add(v632, v93, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v632, false);
  ttnn::deallocate(v93, false);
  ::ttnn::Tensor v634 = ttnn::clamp(v633, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v633, false);
  ::ttnn::Tensor v635 = ttnn::reshape(v634, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v634, false);
  ::ttnn::Tensor v636 = ttnn::from_device(v635);
  ttnn::deallocate(v635, false);
  ::ttnn::Tensor v637 = ttnn::to_layout(v636, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v636, false);
  ::ttnn::Tensor v638 = ttnn::to_device(v637, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v637, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v639 = ttnn::conv2d(v638, v156, v166, 960, 960, 1, 7, 7, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 960, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v640 = ::std::get<0>(v639);
  ttnn::deallocate(v638, false);
  ttnn::deallocate(v156, false);
  ::ttnn::Tensor v641 = ttnn::reshape(v640, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v640, false);
  ::ttnn::Tensor v642 = ttnn::multiply(v641, v94, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v641, false);
  ttnn::deallocate(v94, false);
  ::ttnn::Tensor v643 = ttnn::add(v642, v95, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v642, false);
  ttnn::deallocate(v95, false);
  ::ttnn::Tensor v644 = ttnn::clamp(v643, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v643, false);
  ::ttnn::Tensor v645 = ttnn::reshape(v644, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v644, false);
  ::ttnn::Tensor v646 = ttnn::from_device(v645);
  ttnn::deallocate(v645, false);
  ::ttnn::Tensor v647 = ttnn::to_layout(v646, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v646, false);
  ::ttnn::Tensor v648 = ttnn::to_device(v647, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v647, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v649 = ttnn::conv2d(v648, v157, v166, 960, 160, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v650 = ::std::get<0>(v649);
  ttnn::deallocate(v648, false);
  ttnn::deallocate(v157, false);
  ::ttnn::Tensor v651 = ttnn::reshape(v650, ::std::vector<int32_t>{1, 7, 7, 160}, ::std::nullopt);
  ttnn::deallocate(v650, false);
  ::ttnn::Tensor v652 = ttnn::multiply(v651, v96, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v651, false);
  ttnn::deallocate(v96, false);
  ::ttnn::Tensor v653 = ttnn::add(v652, v97, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v652, false);
  ttnn::deallocate(v97, false);
  ::ttnn::Tensor v654 = ttnn::reshape(v653, ::std::vector<int32_t>{1, 1, 49, 160}, ::std::nullopt);
  ttnn::deallocate(v653, false);
  ::ttnn::Tensor v655 = ttnn::add(v625, v654, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v654, false);
  ttnn::deallocate(v625, false);
  ::ttnn::Tensor v656 = ttnn::from_device(v655);
  ttnn::deallocate(v655, false);
  ::ttnn::Tensor v657 = ttnn::to_layout(v656, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v656, false);
  ::ttnn::Tensor v658 = ttnn::to_device(v657, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v657, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v659 = ttnn::conv2d(v658, v158, v166, 160, 960, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v660 = ::std::get<0>(v659);
  ttnn::deallocate(v658, false);
  ttnn::deallocate(v158, false);
  ::ttnn::Tensor v661 = ttnn::reshape(v660, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v660, false);
  ::ttnn::Tensor v662 = ttnn::multiply(v661, v98, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v661, false);
  ttnn::deallocate(v98, false);
  ::ttnn::Tensor v663 = ttnn::add(v662, v99, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v662, false);
  ttnn::deallocate(v99, false);
  ::ttnn::Tensor v664 = ttnn::clamp(v663, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v663, false);
  ::ttnn::Tensor v665 = ttnn::reshape(v664, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v664, false);
  ::ttnn::Tensor v666 = ttnn::from_device(v665);
  ttnn::deallocate(v665, false);
  ::ttnn::Tensor v667 = ttnn::to_layout(v666, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v666, false);
  ::ttnn::Tensor v668 = ttnn::to_device(v667, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v667, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v669 = ttnn::conv2d(v668, v159, v166, 960, 960, 1, 7, 7, ::std::array<uint32_t, 2>{3, 3}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, 960, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v670 = ::std::get<0>(v669);
  ttnn::deallocate(v668, false);
  ttnn::deallocate(v159, false);
  ::ttnn::Tensor v671 = ttnn::reshape(v670, ::std::vector<int32_t>{1, 7, 7, 960}, ::std::nullopt);
  ttnn::deallocate(v670, false);
  ::ttnn::Tensor v672 = ttnn::multiply(v671, v100, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v671, false);
  ttnn::deallocate(v100, false);
  ::ttnn::Tensor v673 = ttnn::add(v672, v101, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v672, false);
  ttnn::deallocate(v101, false);
  ::ttnn::Tensor v674 = ttnn::clamp(v673, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v673, false);
  ::ttnn::Tensor v675 = ttnn::reshape(v674, ::std::vector<int32_t>{1, 1, 49, 960}, ::std::nullopt);
  ttnn::deallocate(v674, false);
  ::ttnn::Tensor v676 = ttnn::from_device(v675);
  ttnn::deallocate(v675, false);
  ::ttnn::Tensor v677 = ttnn::to_layout(v676, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v676, false);
  ::ttnn::Tensor v678 = ttnn::to_device(v677, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v677, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v679 = ttnn::conv2d(v678, v160, v166, 960, 320, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v680 = ::std::get<0>(v679);
  ttnn::deallocate(v678, false);
  ttnn::deallocate(v160, false);
  ::ttnn::Tensor v681 = ttnn::reshape(v680, ::std::vector<int32_t>{1, 7, 7, 320}, ::std::nullopt);
  ttnn::deallocate(v680, false);
  ::ttnn::Tensor v682 = ttnn::multiply(v681, v102, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v681, false);
  ttnn::deallocate(v102, false);
  ::ttnn::Tensor v683 = ttnn::add(v682, v103, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v682, false);
  ttnn::deallocate(v103, false);
  ::ttnn::Tensor v684 = ttnn::reshape(v683, ::std::vector<int32_t>{1, 1, 49, 320}, ::std::nullopt);
  ttnn::deallocate(v683, false);
  ::ttnn::Tensor v685 = ttnn::from_device(v684);
  ttnn::deallocate(v684, false);
  ::ttnn::Tensor v686 = ttnn::to_layout(v685, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v685, false);
  ::ttnn::Tensor v687 = ttnn::to_device(v686, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v686, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v688 = ttnn::conv2d(v687, v161, v166, 320, 1280, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v689 = ::std::get<0>(v688);
  ttnn::deallocate(v687, false);
  ttnn::deallocate(v161, false);
  ::ttnn::Tensor v690 = ttnn::reshape(v689, ::std::vector<int32_t>{1, 7, 7, 1280}, ::std::nullopt);
  ttnn::deallocate(v689, false);
  ::ttnn::Tensor v691 = ttnn::transpose(v690, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v690, false);
  ::ttnn::Tensor v692 = ttnn::transpose(v691, 1, 2, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v691, false);
  ::ttnn::Tensor v693 = ttnn::multiply(v692, v104, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v692, false);
  ttnn::deallocate(v104, false);
  ::ttnn::Tensor v694 = ttnn::add(v693, v105, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v693, false);
  ttnn::deallocate(v105, false);
  ::ttnn::Tensor v695 = ttnn::clamp(v694, 0.000000f, 6.000000f, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v694, false);
  ::ttnn::Tensor v696 = ttnn::transpose(v695, 1, 2, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v697 = ttnn::transpose(v696, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v696, false);
  ::ttnn::Tensor v698 = ttnn::reshape(v697, ::std::vector<int32_t>{1, 1, 49, 1280}, ::std::nullopt);
  ttnn::deallocate(v697, false);
  ::ttnn::Tensor v699 = ttnn::from_device(v698);
  ttnn::deallocate(v698, false);
  ::ttnn::Tensor v700 = ttnn::to_layout(v699, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v699, false);
  ::ttnn::Tensor v701 = ttnn::to_device(v700, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v700, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v702 = ttnn::conv2d(v701, v162, v166, 1280, 128, 1, 7, 7, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v703 = ::std::get<0>(v702);
  ttnn::deallocate(v701, false);
  ttnn::deallocate(v162, false);
  ::ttnn::Tensor v704 = ttnn::reshape(v703, ::std::vector<int32_t>{1, 7, 7, 128}, ::std::nullopt);
  ttnn::deallocate(v703, false);
  ::ttnn::Tensor v705 = ttnn::multiply(v704, v106, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v704, false);
  ttnn::deallocate(v106, false);
  ::ttnn::Tensor v706 = ttnn::add(v705, v107, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v705, false);
  ttnn::deallocate(v107, false);
  ::ttnn::Tensor v707 = ttnn::relu(v706, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v706, false);
  ::ttnn::Tensor v708 = ttnn::reshape(v695, ::std::vector<int32_t>{1, 1, 1280, 49}, ::std::nullopt);
  ttnn::deallocate(v695, false);
  ::ttnn::Tensor v709 = ttnn::transpose(v708, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v708, false);
  ::ttnn::Tensor v710 = ttnn::mean(v709, ::ttnn::SmallVector<int32_t>{-2}, true, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v709, false);
  ::ttnn::Tensor v711 = ttnn::reshape(v710, ::std::vector<int32_t>{1, 1280, 1, 1}, ::std::nullopt);
  ttnn::deallocate(v710, false);
  ::ttnn::Tensor v712 = ttnn::transpose(v711, 1, 2, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v711, false);
  ::ttnn::Tensor v713 = ttnn::transpose(v712, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v712, false);
  ::ttnn::Tensor v714 = ttnn::from_device(v713);
  ttnn::deallocate(v713, false);
  ::ttnn::Tensor v715 = ttnn::to_layout(v714, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v714, false);
  ::ttnn::Tensor v716 = ttnn::to_device(v715, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v715, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v717 = ttnn::conv2d(v716, v163, v166, 1280, 128, 1, 1, 1, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, ::std::nullopt, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v718 = ::std::get<0>(v717);
  ttnn::deallocate(v716, false);
  ttnn::deallocate(v163, false);
  ::ttnn::Tensor v719 = ttnn::sigmoid(v718, 4, false, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v718, false);
  ::ttnn::Tensor v720 = ttnn::multiply(v707, v719, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v719, false);
  ttnn::deallocate(v707, false);
  ::ttnn::Tensor v721 = ttnn::typecast(v720, ::ttnn::DataType::BFLOAT16, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v720, false);
  ::ttnn::Tensor v722 = ttnn::from_device(v721);
  ttnn::deallocate(v721, false);
  ::ttnn::Tensor v723 = ttnn::to_layout(v722, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v722, false);
  ::ttnn::Tensor v724 = ttnn::to_device(v723, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v723, false);
  ::ttnn::Tensor v725 = ttnn::upsample(v724, 4, "nearest", ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v724, false);
  ::ttnn::Tensor v726 = ttnn::to_layout(v725, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM}, v166);
  ttnn::deallocate(v725, false);
  ::ttnn::Tensor v727 = ttnn::typecast(v726, ::ttnn::DataType::FLOAT32, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v726, false);
  ::ttnn::Tensor v728 = ttnn::reshape(v727, ::std::vector<int32_t>{1, 1, 784, 128}, ::std::nullopt);
  ttnn::deallocate(v727, false);
  ::ttnn::Tensor v729 = ttnn::from_device(v728);
  ttnn::deallocate(v728, false);
  ::ttnn::Tensor v730 = ttnn::to_layout(v729, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v729, false);
  ::ttnn::Tensor v731 = ttnn::to_device(v730, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v730, false);
  ::std::variant<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>, ::std::tuple<::ttnn::Tensor, ::std::tuple<uint32_t, uint32_t>, ::std::tuple<::ttnn::Tensor, ::std::optional<::ttnn::Tensor>>>> v732 = ttnn::conv2d(v731, v164, v166, 128, 1, 1, 28, 28, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{1, 1}, ::std::array<uint32_t, 2>{0, 0}, ::std::array<uint32_t, 2>{1, 1}, 1, v165, ::ttnn::operations::conv::conv2d::Conv2dConfig{.dtype = ::ttnn::DataType::FLOAT32, .weights_dtype = ::ttnn::DataType::FLOAT32}, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v733 = ::std::get<0>(v732);
  ttnn::deallocate(v731, false);
  ttnn::deallocate(v165, false);
  ttnn::deallocate(v164, false);
  ::ttnn::Tensor v734 = ttnn::reshape(v733, ::std::vector<int32_t>{1, 28, 28, 1}, ::std::nullopt);
  ttnn::deallocate(v733, false);
  ::ttnn::Tensor v735 = ttnn::add(v293, v734, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v734, false);
  ttnn::deallocate(v293, false);
  ::ttnn::Tensor v736 = ttnn::typecast(v735, ::ttnn::DataType::BFLOAT16, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v735, false);
  ::ttnn::Tensor v737 = ttnn::from_device(v736);
  ttnn::deallocate(v736, false);
  ::ttnn::Tensor v738 = ttnn::to_layout(v737, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY}, static_cast<::ttnn::IDevice *>(nullptr));
  ttnn::deallocate(v737, false);
  ::ttnn::Tensor v739 = ttnn::to_device(v738, v166, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v738, false);
  ::ttnn::Tensor v740 = ttnn::upsample(v739, 8, "nearest", ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v739, false);
  ::ttnn::Tensor v741 = ttnn::to_layout(v740, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM}, v166);
  ttnn::deallocate(v740, false);
  ::ttnn::Tensor v742 = ttnn::typecast(v741, ::ttnn::DataType::FLOAT32, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v741, false);
  ::ttnn::Tensor v743 = ttnn::transpose(v742, 2, 3, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v742, false);
  ::ttnn::Tensor v744 = ttnn::transpose(v743, 1, 2, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ttnn::deallocate(v743, false);
  return v744;
}

std::tuple<::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor, ::ttnn::Tensor> createInputsFor_forward() {
  ttnn::IDevice* v1 = ttnn::DeviceGetter::getInstance(24576);
  ::ttnn::Tensor v2 = ttnn::ones(::ttnn::Shape({1, 3, 224, 224}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v3 = ttnn::to_device(v2, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v4 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v5 = ttnn::to_device(v4, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v6 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v7 = ttnn::to_device(v6, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v8 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v9 = ttnn::to_device(v8, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v10 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v11 = ttnn::to_device(v10, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v12 = ttnn::ones(::ttnn::Shape({1, 1, 1, 16}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v13 = ttnn::to_device(v12, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v14 = ttnn::ones(::ttnn::Shape({1, 1, 1, 16}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v15 = ttnn::to_device(v14, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v16 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v17 = ttnn::to_device(v16, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v18 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v19 = ttnn::to_device(v18, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v20 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v21 = ttnn::to_device(v20, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v22 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v23 = ttnn::to_device(v22, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v24 = ttnn::ones(::ttnn::Shape({1, 1, 1, 24}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v25 = ttnn::to_device(v24, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v26 = ttnn::ones(::ttnn::Shape({1, 1, 1, 24}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v27 = ttnn::to_device(v26, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v28 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v29 = ttnn::to_device(v28, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v30 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v31 = ttnn::to_device(v30, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v32 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v33 = ttnn::to_device(v32, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v34 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v35 = ttnn::to_device(v34, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v36 = ttnn::ones(::ttnn::Shape({1, 1, 1, 24}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v37 = ttnn::to_device(v36, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v38 = ttnn::ones(::ttnn::Shape({1, 1, 1, 24}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v39 = ttnn::to_device(v38, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v40 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v41 = ttnn::to_device(v40, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v42 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v43 = ttnn::to_device(v42, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v44 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v45 = ttnn::to_device(v44, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v46 = ttnn::ones(::ttnn::Shape({1, 1, 1, 144}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v47 = ttnn::to_device(v46, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v48 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v49 = ttnn::to_device(v48, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v50 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v51 = ttnn::to_device(v50, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v52 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v53 = ttnn::to_device(v52, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v54 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v55 = ttnn::to_device(v54, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v56 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v57 = ttnn::to_device(v56, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v58 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v59 = ttnn::to_device(v58, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v60 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v61 = ttnn::to_device(v60, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v62 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v63 = ttnn::to_device(v62, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v64 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v65 = ttnn::to_device(v64, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v66 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v67 = ttnn::to_device(v66, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v68 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v69 = ttnn::to_device(v68, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v70 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v71 = ttnn::to_device(v70, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v72 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v73 = ttnn::to_device(v72, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v74 = ttnn::ones(::ttnn::Shape({1, 1, 1, 32}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v75 = ttnn::to_device(v74, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v76 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v77 = ttnn::to_device(v76, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v78 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v79 = ttnn::to_device(v78, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v80 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v81 = ttnn::to_device(v80, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v82 = ttnn::ones(::ttnn::Shape({1, 1, 1, 192}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v83 = ttnn::to_device(v82, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v84 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v85 = ttnn::to_device(v84, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v86 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v87 = ttnn::to_device(v86, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v88 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v89 = ttnn::to_device(v88, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v90 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v91 = ttnn::to_device(v90, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v92 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v93 = ttnn::to_device(v92, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v94 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v95 = ttnn::to_device(v94, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v96 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v97 = ttnn::to_device(v96, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v98 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v99 = ttnn::to_device(v98, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v100 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v101 = ttnn::to_device(v100, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v102 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v103 = ttnn::to_device(v102, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v104 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v105 = ttnn::to_device(v104, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v106 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v107 = ttnn::to_device(v106, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v108 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v109 = ttnn::to_device(v108, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v110 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v111 = ttnn::to_device(v110, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v112 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v113 = ttnn::to_device(v112, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v114 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v115 = ttnn::to_device(v114, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v116 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v117 = ttnn::to_device(v116, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v118 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v119 = ttnn::to_device(v118, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v120 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v121 = ttnn::to_device(v120, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v122 = ttnn::ones(::ttnn::Shape({1, 1, 1, 64}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v123 = ttnn::to_device(v122, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v124 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v125 = ttnn::to_device(v124, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v126 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v127 = ttnn::to_device(v126, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v128 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v129 = ttnn::to_device(v128, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v130 = ttnn::ones(::ttnn::Shape({1, 1, 1, 384}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v131 = ttnn::to_device(v130, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v132 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v133 = ttnn::to_device(v132, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v134 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v135 = ttnn::to_device(v134, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v136 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v137 = ttnn::to_device(v136, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v138 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v139 = ttnn::to_device(v138, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v140 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v141 = ttnn::to_device(v140, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v142 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v143 = ttnn::to_device(v142, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v144 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v145 = ttnn::to_device(v144, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v146 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v147 = ttnn::to_device(v146, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v148 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v149 = ttnn::to_device(v148, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v150 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v151 = ttnn::to_device(v150, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v152 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v153 = ttnn::to_device(v152, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v154 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v155 = ttnn::to_device(v154, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v156 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v157 = ttnn::to_device(v156, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v158 = ttnn::ones(::ttnn::Shape({1, 1, 1, 96}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v159 = ttnn::to_device(v158, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v160 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v161 = ttnn::to_device(v160, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v162 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v163 = ttnn::to_device(v162, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v164 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v165 = ttnn::to_device(v164, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v166 = ttnn::ones(::ttnn::Shape({1, 1, 1, 576}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v167 = ttnn::to_device(v166, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v168 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v169 = ttnn::to_device(v168, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v170 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v171 = ttnn::to_device(v170, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v172 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v173 = ttnn::to_device(v172, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v174 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v175 = ttnn::to_device(v174, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v176 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v177 = ttnn::to_device(v176, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v178 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v179 = ttnn::to_device(v178, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v180 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v181 = ttnn::to_device(v180, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v182 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v183 = ttnn::to_device(v182, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v184 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v185 = ttnn::to_device(v184, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v186 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v187 = ttnn::to_device(v186, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v188 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v189 = ttnn::to_device(v188, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v190 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v191 = ttnn::to_device(v190, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v192 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v193 = ttnn::to_device(v192, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v194 = ttnn::ones(::ttnn::Shape({1, 1, 1, 160}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v195 = ttnn::to_device(v194, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v196 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v197 = ttnn::to_device(v196, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v198 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v199 = ttnn::to_device(v198, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v200 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v201 = ttnn::to_device(v200, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v202 = ttnn::ones(::ttnn::Shape({1, 1, 1, 960}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v203 = ttnn::to_device(v202, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v204 = ttnn::ones(::ttnn::Shape({1, 1, 1, 320}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v205 = ttnn::to_device(v204, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v206 = ttnn::ones(::ttnn::Shape({1, 1, 1, 320}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v207 = ttnn::to_device(v206, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v208 = ttnn::ones(::ttnn::Shape({1, 1280, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v209 = ttnn::to_device(v208, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v210 = ttnn::ones(::ttnn::Shape({1, 1280, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v211 = ttnn::to_device(v210, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v212 = ttnn::ones(::ttnn::Shape({1, 1, 1, 128}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v213 = ttnn::to_device(v212, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v214 = ttnn::ones(::ttnn::Shape({1, 1, 1, 128}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v215 = ttnn::to_device(v214, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v216 = ttnn::ones(::ttnn::Shape({32, 3, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v217 = ttnn::ones(::ttnn::Shape({32, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v218 = ttnn::ones(::ttnn::Shape({16, 32, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v219 = ttnn::ones(::ttnn::Shape({96, 16, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v220 = ttnn::ones(::ttnn::Shape({96, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v221 = ttnn::ones(::ttnn::Shape({24, 96, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v222 = ttnn::ones(::ttnn::Shape({144, 24, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v223 = ttnn::ones(::ttnn::Shape({144, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v224 = ttnn::ones(::ttnn::Shape({24, 144, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v225 = ttnn::ones(::ttnn::Shape({144, 24, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v226 = ttnn::ones(::ttnn::Shape({144, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v227 = ttnn::ones(::ttnn::Shape({32, 144, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v228 = ttnn::ones(::ttnn::Shape({1, 32, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v229 = ttnn::ones(::ttnn::Shape({1, 1, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v230 = ttnn::to_device(v229, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v231 = ttnn::ones(::ttnn::Shape({192, 32, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v232 = ttnn::ones(::ttnn::Shape({192, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v233 = ttnn::ones(::ttnn::Shape({32, 192, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v234 = ttnn::ones(::ttnn::Shape({192, 32, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v235 = ttnn::ones(::ttnn::Shape({192, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v236 = ttnn::ones(::ttnn::Shape({32, 192, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v237 = ttnn::ones(::ttnn::Shape({192, 32, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v238 = ttnn::ones(::ttnn::Shape({192, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v239 = ttnn::ones(::ttnn::Shape({64, 192, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v240 = ttnn::ones(::ttnn::Shape({384, 64, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v241 = ttnn::ones(::ttnn::Shape({384, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v242 = ttnn::ones(::ttnn::Shape({64, 384, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v243 = ttnn::ones(::ttnn::Shape({384, 64, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v244 = ttnn::ones(::ttnn::Shape({384, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v245 = ttnn::ones(::ttnn::Shape({64, 384, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v246 = ttnn::ones(::ttnn::Shape({384, 64, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v247 = ttnn::ones(::ttnn::Shape({384, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v248 = ttnn::ones(::ttnn::Shape({64, 384, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v249 = ttnn::ones(::ttnn::Shape({384, 64, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v250 = ttnn::ones(::ttnn::Shape({384, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v251 = ttnn::ones(::ttnn::Shape({96, 384, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v252 = ttnn::ones(::ttnn::Shape({576, 96, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v253 = ttnn::ones(::ttnn::Shape({576, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v254 = ttnn::ones(::ttnn::Shape({96, 576, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v255 = ttnn::ones(::ttnn::Shape({576, 96, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v256 = ttnn::ones(::ttnn::Shape({576, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v257 = ttnn::ones(::ttnn::Shape({96, 576, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v258 = ttnn::ones(::ttnn::Shape({576, 96, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v259 = ttnn::ones(::ttnn::Shape({576, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v260 = ttnn::ones(::ttnn::Shape({160, 576, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v261 = ttnn::ones(::ttnn::Shape({960, 160, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v262 = ttnn::ones(::ttnn::Shape({960, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v263 = ttnn::ones(::ttnn::Shape({160, 960, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v264 = ttnn::ones(::ttnn::Shape({960, 160, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v265 = ttnn::ones(::ttnn::Shape({960, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v266 = ttnn::ones(::ttnn::Shape({160, 960, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v267 = ttnn::ones(::ttnn::Shape({960, 160, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v268 = ttnn::ones(::ttnn::Shape({960, 1, 3, 3}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v269 = ttnn::ones(::ttnn::Shape({320, 960, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v270 = ttnn::ones(::ttnn::Shape({1280, 320, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v271 = ttnn::ones(::ttnn::Shape({128, 1280, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v272 = ttnn::ones(::ttnn::Shape({128, 1280, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v273 = ttnn::ones(::ttnn::Shape({1, 128, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::ROW_MAJOR, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::SYSTEM_MEMORY});
  ::ttnn::Tensor v274 = ttnn::ones(::ttnn::Shape({1, 1, 1, 1}), ::ttnn::DataType::FLOAT32, ::ttnn::Layout::TILE, ::std::nullopt, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  ::ttnn::Tensor v275 = ttnn::to_device(v274, v1, ::ttnn::MemoryConfig {.memory_layout = ::ttnn::TensorMemoryLayout::INTERLEAVED, .buffer_type = ::ttnn::BufferType::DRAM});
  return std::make_tuple(v3, v5, v7, v9, v11, v13, v15, v17, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43, v45, v47, v49, v51, v53, v55, v57, v59, v61, v63, v65, v67, v69, v71, v73, v75, v77, v79, v81, v83, v85, v87, v89, v91, v93, v95, v97, v99, v101, v103, v105, v107, v109, v111, v113, v115, v117, v119, v121, v123, v125, v127, v129, v131, v133, v135, v137, v139, v141, v143, v145, v147, v149, v151, v153, v155, v157, v159, v161, v163, v165, v167, v169, v171, v173, v175, v177, v179, v181, v183, v185, v187, v189, v191, v193, v195, v197, v199, v201, v203, v205, v207, v209, v211, v213, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v275);
}

int32_t main() {
  ::ttnn::Tensor v1;
  ::ttnn::Tensor v2;
  ::ttnn::Tensor v3;
  ::ttnn::Tensor v4;
  ::ttnn::Tensor v5;
  ::ttnn::Tensor v6;
  ::ttnn::Tensor v7;
  ::ttnn::Tensor v8;
  ::ttnn::Tensor v9;
  ::ttnn::Tensor v10;
  ::ttnn::Tensor v11;
  ::ttnn::Tensor v12;
  ::ttnn::Tensor v13;
  ::ttnn::Tensor v14;
  ::ttnn::Tensor v15;
  ::ttnn::Tensor v16;
  ::ttnn::Tensor v17;
  ::ttnn::Tensor v18;
  ::ttnn::Tensor v19;
  ::ttnn::Tensor v20;
  ::ttnn::Tensor v21;
  ::ttnn::Tensor v22;
  ::ttnn::Tensor v23;
  ::ttnn::Tensor v24;
  ::ttnn::Tensor v25;
  ::ttnn::Tensor v26;
  ::ttnn::Tensor v27;
  ::ttnn::Tensor v28;
  ::ttnn::Tensor v29;
  ::ttnn::Tensor v30;
  ::ttnn::Tensor v31;
  ::ttnn::Tensor v32;
  ::ttnn::Tensor v33;
  ::ttnn::Tensor v34;
  ::ttnn::Tensor v35;
  ::ttnn::Tensor v36;
  ::ttnn::Tensor v37;
  ::ttnn::Tensor v38;
  ::ttnn::Tensor v39;
  ::ttnn::Tensor v40;
  ::ttnn::Tensor v41;
  ::ttnn::Tensor v42;
  ::ttnn::Tensor v43;
  ::ttnn::Tensor v44;
  ::ttnn::Tensor v45;
  ::ttnn::Tensor v46;
  ::ttnn::Tensor v47;
  ::ttnn::Tensor v48;
  ::ttnn::Tensor v49;
  ::ttnn::Tensor v50;
  ::ttnn::Tensor v51;
  ::ttnn::Tensor v52;
  ::ttnn::Tensor v53;
  ::ttnn::Tensor v54;
  ::ttnn::Tensor v55;
  ::ttnn::Tensor v56;
  ::ttnn::Tensor v57;
  ::ttnn::Tensor v58;
  ::ttnn::Tensor v59;
  ::ttnn::Tensor v60;
  ::ttnn::Tensor v61;
  ::ttnn::Tensor v62;
  ::ttnn::Tensor v63;
  ::ttnn::Tensor v64;
  ::ttnn::Tensor v65;
  ::ttnn::Tensor v66;
  ::ttnn::Tensor v67;
  ::ttnn::Tensor v68;
  ::ttnn::Tensor v69;
  ::ttnn::Tensor v70;
  ::ttnn::Tensor v71;
  ::ttnn::Tensor v72;
  ::ttnn::Tensor v73;
  ::ttnn::Tensor v74;
  ::ttnn::Tensor v75;
  ::ttnn::Tensor v76;
  ::ttnn::Tensor v77;
  ::ttnn::Tensor v78;
  ::ttnn::Tensor v79;
  ::ttnn::Tensor v80;
  ::ttnn::Tensor v81;
  ::ttnn::Tensor v82;
  ::ttnn::Tensor v83;
  ::ttnn::Tensor v84;
  ::ttnn::Tensor v85;
  ::ttnn::Tensor v86;
  ::ttnn::Tensor v87;
  ::ttnn::Tensor v88;
  ::ttnn::Tensor v89;
  ::ttnn::Tensor v90;
  ::ttnn::Tensor v91;
  ::ttnn::Tensor v92;
  ::ttnn::Tensor v93;
  ::ttnn::Tensor v94;
  ::ttnn::Tensor v95;
  ::ttnn::Tensor v96;
  ::ttnn::Tensor v97;
  ::ttnn::Tensor v98;
  ::ttnn::Tensor v99;
  ::ttnn::Tensor v100;
  ::ttnn::Tensor v101;
  ::ttnn::Tensor v102;
  ::ttnn::Tensor v103;
  ::ttnn::Tensor v104;
  ::ttnn::Tensor v105;
  ::ttnn::Tensor v106;
  ::ttnn::Tensor v107;
  ::ttnn::Tensor v108;
  ::ttnn::Tensor v109;
  ::ttnn::Tensor v110;
  ::ttnn::Tensor v111;
  ::ttnn::Tensor v112;
  ::ttnn::Tensor v113;
  ::ttnn::Tensor v114;
  ::ttnn::Tensor v115;
  ::ttnn::Tensor v116;
  ::ttnn::Tensor v117;
  ::ttnn::Tensor v118;
  ::ttnn::Tensor v119;
  ::ttnn::Tensor v120;
  ::ttnn::Tensor v121;
  ::ttnn::Tensor v122;
  ::ttnn::Tensor v123;
  ::ttnn::Tensor v124;
  ::ttnn::Tensor v125;
  ::ttnn::Tensor v126;
  ::ttnn::Tensor v127;
  ::ttnn::Tensor v128;
  ::ttnn::Tensor v129;
  ::ttnn::Tensor v130;
  ::ttnn::Tensor v131;
  ::ttnn::Tensor v132;
  ::ttnn::Tensor v133;
  ::ttnn::Tensor v134;
  ::ttnn::Tensor v135;
  ::ttnn::Tensor v136;
  ::ttnn::Tensor v137;
  ::ttnn::Tensor v138;
  ::ttnn::Tensor v139;
  ::ttnn::Tensor v140;
  ::ttnn::Tensor v141;
  ::ttnn::Tensor v142;
  ::ttnn::Tensor v143;
  ::ttnn::Tensor v144;
  ::ttnn::Tensor v145;
  ::ttnn::Tensor v146;
  ::ttnn::Tensor v147;
  ::ttnn::Tensor v148;
  ::ttnn::Tensor v149;
  ::ttnn::Tensor v150;
  ::ttnn::Tensor v151;
  ::ttnn::Tensor v152;
  ::ttnn::Tensor v153;
  ::ttnn::Tensor v154;
  ::ttnn::Tensor v155;
  ::ttnn::Tensor v156;
  ::ttnn::Tensor v157;
  ::ttnn::Tensor v158;
  ::ttnn::Tensor v159;
  ::ttnn::Tensor v160;
  ::ttnn::Tensor v161;
  ::ttnn::Tensor v162;
  ::ttnn::Tensor v163;
  ::ttnn::Tensor v164;
  ::ttnn::Tensor v165;
  std::tie(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165) = createInputsFor_forward();
  ::ttnn::Tensor v166 = forward(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165);
  int32_t v167 = 0;
  return v167;
}

}

